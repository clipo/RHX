

MultiPROBE Script Language
Graphical User Interface Tools


V00.0   TLG     5/12/95     Original
V00.1   TLG     5/16/95     Revised intro, function capabilities, arguments
                            and completed the full function descriptions
V01.0   TLG     5/19/95     Updated based on 5/17 meeting with KWB, TCM, GVM
V02.0   TLG     6/15/95     Updated following completion of development
V02.1   TLG     6/21/95     Changed MSL_EditLoadFile() and MSL_ListLoadFile() to
                            MSL_EditReadFile() and MSL_ListReadFile().  Added
                            MSL_EditWriteFile() and MSL_ListWriteFile().
V02.2   TLG     6/28/95     Added MSL_EditSetLimits() and MSL_ScrollSetLimits()
V02.3   TLG     2/17/97     Added MSL_UpdateControl(), MSL_GetAvailableDialogId(),
                            and MSL_GetAvailableControlId().
                            Also added a read-only flag to MSL_CreateToggleBtn()
V02.4   TLG     2/25/97     Added MSL_BtnSetSelectFile() function.
V02.5   TLG     7/02/97     Removed MSL_MemAlloc() and MSL_MemFree().
                            The C runtime library functions malloc(), calloc()
                            realloc() and free() should be used instead.


--------------------------------------------------------------------------------
Introduction
--------------------------------------------------------------------------------

The MultiPROBE Script Language (or MSL) contains an API that allows the script
writer to develop a user interface that is consistent with the Windows NT or
Windows 95 environments.

The script communicates to the user through dialog boxes.  Two kinds of dialog
boxes are available through MSL.  They are "canned" and "custom".

    A "canned" dialog is created via a single function call.  Script execution
    is then paused until the user dismisses the dialog.
    Information is passed between the script and the dialog via parameters in
    the function's argument list as well as the returned value of the function.
    The available canned dialogs include a file selection dialog box and a
    message/query dialog.

    A "custom" dialog is build by the script.  The script creates a dialog and
    then populates that dialog with various controls.  A control may be a label,
    push button, list box, etc.
    Script execution is not paused unless it explicitly waits for a single
    control or the first of a list of controls to be affected (i.e. clicked or
    edited) by the user.  The script could also wait for all of a list of
    controls to be affected.
    Information may be passed between the script and the dialog through a 
    polling function and/or by associating a script variable with each (or some)
    of the controls in the dialog.  These variables will be updated as the
    value of the control is changed by the user.

For more information on the canned dialog boxes, see the section titled
"Canned Dialog Functions".

More detail regarding customized dialog boxes is included in the following
sections.


--------------------------------------------------------------------------------
Customized Dialog Overview
--------------------------------------------------------------------------------

MSL provides functions to create both dialog boxes as well as controls within
those dialog boxes.  These controls may be static (i.e. labels, group boxes) or
they may be dynamic (i.e. edit boxes, push buttons).

The script must assign each dialog and control it creates an integer identifier.
The dialog box ID must be unique among all dialogs created by the script that
exist concurrently.  The control ID must be unique among all controls that
exist in the same dialog box.  Both dialog and control IDs must be in the
range of 1 - 65279.  IDs 65280 - 65535 are reserved for MSL.

When referencing a dialog, you need the dialog id.  When referencing a control,
you need the dialog id and the control id.

All controls may be visible or invisible, enabled or disabled.  When visible,
they may be seen on the parent dialog box.  When invisible, they still exist
but are not shown on the dialog.  When enabled, they have a solid color.
When disabled, they are greyed and (if dynamic) cannot be changed by the
user.  Some dynamic controls may also be considered enabled but read-only.
That is, they have a solid appearence but are not alterable by the user
(at this time, only the edit box and toggle button controls may be read-only).

Static controls are given an initial label, size and position when they are
created.  Although its label cannot be changed by the user, it may be
reloaded by the script at anytime during its existance.

Dynamic controls are also given an initial label, value (or values; Push Btns
have no value) as well as size and position when they are created.  These values
may be changed at anytime by the script.  The user may also change the values as
long as the control is visible and enabled.
When created, the dynamic control may be passed the address of a variable that
will be updated as the "value" of the control changes.  Dynamic controls may
also be polled by the script to obtain their current value.

Both static an dynamic controls may be repositioned and/or resized at any time
by the script.

The script may wait for a certain control or list of controls to be "clicked"
on (or edited) by the user.  The duration of this wait may be specified by the
script.

Multiple controls may be linked together into a collection control.  The
collection control is not in itself a visible control, but it can be treated
like a normal control in that you may render it visible or invisible, enabled
or disabled.  When doing so, all controls that are part of the collection are
effected.  When deleting a collection, the script may indicate if the member
controls should also be deleted.
In addition to IDs of normal controls, a collection may also contain the ID of
one or more other collections (which may themselves contain collections, etc.).
However, there is a limit of 4 collection nesting levels and no collection may
contain the ID of a "parent" collection.

One or more controls may be "slaved" to another control.  That is, their
visibility and/or enable state depend on the value of the "master" control.
Any control may be a slave.  Only dynamic controls may be masters (except
for the push button).  A collection, like any other control, may be a slave.
However, it may not be a master control as it has no value.

For example, a combo box may contain a list of setup catagories.  Several
collections of controls may be slaved to certain values of the combo box.
At any one time, depending on the current value (or selection), a single
collection of controls is in view.  Changing the selection automatically
changes the collection of controls that are visible.


The following controls are available for customized dialog boxes...

    Collection
    Combo Box
    Edit Box
    Group Box
    Information Bar
    Label
    List Box
    Push Button
    Radio Button
    Scroll Bar
    Toggle Button


--------------------------------------------------------------------------------
Specific Dynamic Control Capabilities
--------------------------------------------------------------------------------

Combo Boxes

    Also known as a drop down list, the combo box allows the user to select
    a single entry from a list of posible entries.
    When not in use, the combo box displays only the current selection.


Edit Boxes

    An edit box is a control in which text may be displayed and/or entered
    via the keyboard.  It may contain one or several lines of text.
    Its contents may be defined at create time as "TEXT", "INT" or "DOUBLE".
    If "INT" or "DOUBLE", low and/or high limits may be specified.  The user
    will not be allowed to enter a value that exceeds the limit(s).
    In addition, left/right arrows may be added in order to provide "spin
    control".  In this case, low and high limits are required as well as an
    increment value.
    If "TEXT", the low and high limits refer to the min/max number of
    characters that may be entered.


Information Bar

    By default, every dialog box will have an information bar.  The bar will
    appear along the base of the dialog box.  It will display the help text of
    the control that has input focus.  Each dynamic control create function
    has an argument where help text may be supplied.
    In addition, you may display string followed by a % done indicator.
    You may periodically update the value of the % done indicator.  When
    the work is complete, the information line reverts back help text for
    the last control that had input focus.


List Boxes

    A list box is used to enumerate a list of text strings.  The list may
    exceed the height (in text lines) of the list box.
    The list box may be configured to allow single or multiple selections.
    Two list boxes may be linked together so that entries may be moved
    from one list to the other by single (or double) clicking on an entry.
    One of the two may be designated as a fixed list so that entries in its
    list are copied (not moved) to the other list box.
    When linked, the list box will not allow multiple simultainious selections.

    Another feature is the ability to specify a list of controls that are
    dependent on the list box's current selection.  This dependency is in
    regard to the value that is displayed in the control.  That is, the
    list box may represent a list of data records.  Controls may exist
    whose displayed value must change as the selected record in the list
    box changes.  To accomplish this automatically, the script must do
    the following.

        1. When creating each editable control (edit box, toggle btn, etc.),
           specify the start address of an array of values in the "pVal"
           parameter.  All editable controls have a pVal argument in
           their respective create functions.

        2. Create the list box.  Be sure to specify a iMaxEntries value
           that corresponds to the size of the data arrays passed to
           each control.

        3. Pass a list of the record dependent controls to the
           MSL_ListRecDepControls() function.  If several controls are
           already part of a collection control, the collection control
           ID may be specified instead of the individual control IDs.
           The list could even be a mix of individual control IDs and
           collection control IDs.


Push Buttons

    Push buttons may be given any label.  What happens when they are clicked
    is up to the script.  The script can find out if a button has been clicked
    by polling its state periodically or by waiting until the user clicks it.
    A button may be designated as a dialog dismiss button.  If clicked, the
    dialog on which it appears will be hidden.


Radio Buttons

    A radio button has only two values (On/Off).  When grouped with other
    radio buttons, only one button in the group may be on.  It's similar
    to the combo box except that all possible selections are in view at once.


Scroll Bars

    A scroll bar is a vertical or horizontal bar whose value is represented
    by a box that travels along the length of the bar.
    You do not need to create a scroll bar for multi-line text edit or list
    box controls.  In those cases, scroll bars appear automatically.
    You might explicitly create a scroll bar so that the user may select
    between a range of values.
    In order to let the user view the current value, you may associate the
    scroll bar with an existing edit box, group box or label control.
    If you associate the scroll bar with a label or group box, the value
    displayed cannot be changed except via the scroll bar.  If you associate
    it with an edit box, it may be changed via edit box and/or the scroll bar.
    When creating a scroll bar, you must specify the minimum and maximum
    values allowed.  You must also specify single as well as page increment
    values.  The increment values must evenly divide into the difference
    between the max and min values.


Toggle Buttons

    A toggle button has only two values (On/Off).




--------------------------------------------------------------------------------
API Summary
--------------------------------------------------------------------------------


Canned Dialog Functions:

    These functions display the dialog immediately and do not return to the
    caller until the user dismisses them.

    int MSL_MessageDialog    (iDlgParent, pszTitle, pszMsg, iIcon, iBtn,
                              iDefBtn, iFlags);
    int MSL_SelectFileDialog (iDlgParent, pszTitle, pszFilterSpec,
                              pszDefExt, pszInitDir, pszFilePath, iMaxPath,
                              pszFileName, iMaxName, piROnly, iFlags);



Customized Dialog Functions:

    Newly created dialogs are invisible until explicitely shown.

    int MSL_CreateDialog        (iDlgParent, iDlg, iX, iY, iWidth, iHeight,
                                 pszTitle, iFlags);
    int MSL_DeleteAllDialogs    (iWaitOnly);
    int MSL_DeleteDialog        (iDlg, iFlags);
    int MSL_GetAvailableDialogId();
    int MSL_SetDialogCursor     (iDlg, iCursor);
    int MSL_SetDialogTitle      (iDlg, pszTitle, iFlags);
    int MSL_ShowDialog          (iDlg, iVisible, iFlags);



Create Control Functions:

    Newly created controls are visible or will be visible when the dialog is
    made visible.

    int MSL_CreateCollection(iDlg, iCon, piConList, iControls, iFlags);
    int MSL_CreateComboBox  (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             pszHelp, pszVal, iMaxLen, iFlags);
    int MSL_CreateEditBox   (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             pszHelp, pvVal, pszType, dMinVal, dMaxVal, dIncVal,
                             iMaxLines, iFlags);
    int MSL_CreateGroupBox  (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             iFlags);
    int MSL_CreateLabel     (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             iFlags);
    int MSL_CreateListBox   (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             pszHelp, pszVal, iMaxLen, iMinEntries, iMaxEntries,
                             iFlags);
    int MSL_CreatePushBtn   (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             pszHelp, iRes1, iRes2, iFlags);
    int MSL_CreateRadioBtn  (iDlg, iCon, iX, iY, iWidth, iHeight, pszLabel,
                             pszHelp, piVal, iGrp, iFlags);
    int MSL_CreateScrollBar (iDlg, iCon, iX, iY, iSize, pszHelp, *pdVal,
                             dMinVal, dMaxVal, dSingInc, dPageInc, iAttachCon,
                             iFlags);
    int MSL_CreateToggleBtn (iDlg, iCon, iX, iY, iWidth, iHeight, *pszLabel,
                             pszHelp, piVal, iFlags);



Push Button Functions:

    int MSL_BtnSetFileDialog (iDlg, iCon, iTargetCon, pszTitle, pszFilterSpec,
                              pszDefExt, pszInitDir, pszFilePath, iMaxPath,
                              pszFileName, iMaxName, piROnly, iFlags);


Radio/Toggle Button Functions:

    int MSL_BtnGetValue (iDlg, iCon);
    int MSL_BtnSetValue (iDlg, iCon, iValue);

Edit Box Functions:

    int MSL_EditGetValue  (iDlg, iCon, pvValue, iMaxLen);
    int MSL_EditReadFile  (iDlg, iCon, pszFile, iAppend);
    int MSL_EditSetLimits (iDlg, iCon, dMinVal, dMaxVal, dIncVal, iFlags);
    int MSL_EditSetValue  (iDlg, iCon, pvValue, iAppend);
    int MSL_EditWriteFile (iDlg, iCon, pszFile, iAppend);



Information Bar Functions:

    int MSL_InfoShowProg (iDlg, pszLabel, iProgress, pszStep);
    int MSL_InfoShowHelp (iDlg);



List/Combo Box Functions:

    int  MSL_ListDelIndex       (iDlg, iCon, iIndex);
    int  MSL_ListDelValue       (iDlg, iCon, pszStr);
    void MSL_ListFreeSelValue   (ppszStr, iEntries);
    int  MSL_ListGetEntries     (iDlg, iCon);
    int  MSL_ListGetSelValue    (iDlg, iCon, ppszStr, iMaxEntries);
    int  MSL_ListGetSelIndex    (iDlg, iCon, piSelList, iMaxEntries);
    int  MSL_ListGetValue       (iDlg, iCon, iIndex, pszStr, iMaxLen);
    int  MSL_ListLink           (iDlg, iLst1, iLst2, iFixedLst, iClicks);
    int  MSL_ListLoadValues     (iDlg, iCon, pszItems, iDelimiter, iAppend);
    int  MSL_ListReadFile       (iDlg, iCon, pszFile, iAppend);
    int  MSL_ListRecDepControls (iDlg, iCon, piConList, iControls);
    int  MSL_ListSetSelValue    (iDlg, iCon, pszStr, iExclusive);
    int  MSL_ListSetSelIndex    (iDlg, iCon, iIndex, iExclusive);
    int  MSL_ListSetValue       (iDlg, iCon, iIndex, pszStr, iReplace);
    int  MSL_ListWriteFile      (iDlg, iCon, pszFile, iAppend);



Scroll Bar Functions:

    double MSL_ScrollGetValue  (iDlg, iCon);
    int    MSL_ScrollSetLimits (iDlg, iCon, dMinVal, dMaxVal, dSingInc,
                                dPageInc, iFlags);
    double MSL_ScrollSetValue  (iDlg, iCon, dValue);



Generic Control Functions:

    int MSL_DeleteControl        (iDlg, iCon, iMembers);
    int MSL_EnableControl        (iDlg, iCon, iState);
    int MSL_GetControlGeom       (iDlg, iCon, piX, piY, piWidth, piHeight);
    int MSL_GetAvailableControlId();
    int MSL_SetControlFocus      (iDlg, iCon);
    int MSL_SetControlLabel      (iDlg, iCon, pszLabel);
    int MSL_SetControlMaster     (iDlg, iCon, iConMaster, pvVal, dRange, iAction,
                                  iFlags);
    int MSL_SetControlPos        (iDlg, iCon, iX, iY, iWidth, iHeight, iRes,
                                  iFlags);
    int MSL_ShowControl          (iDlg, iCon, iVisible);
    int MSL_UpdateControl        (iDlg, iCon);
    int MSL_WaitControl          (iDlg, iCon, double dTimeout);
    int MSL_WaitControlList      (iDlg, piConList, iControls, dTimeout, iAll);



Misc Functions:

    int   MSL_Beep          (iFreq, dDuration);
    void  MSL_GetScreenSize (piScrWidth, piScrHeight, piChrWidth, piChrHeight);




--------------------------------------------------------------------------------
API Full Description
--------------------------------------------------------------------------------


Unless specified otherwise, all positions and sizes are in units of character
widths and heights.  By default text will be proportionally spaced.
If position and size values are negative, they will be considered as pixel
units.


/*******************************************************************************
*
*   Function:   MSL_CreateDialog
*
*   Purpose:    Creates a single dialog box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateDialog (      // Returns zero if successful
        int iDlgParent,         // Optional ID of parent dialog.
                                //  If zero, the script execution window
                                //  will be considered the parent.
        int iDlg,               // ID to be assigned to the new dialog box.
        int iX,                 // Offset from upper left corner of script wndw.
                                // If -1, will center horizontally.
        int iY,                 // Offset from upper left corner of script wndw.
                                // If -1, will center vertically.
        int iWidth,             // Width of dialog box.
                                // If -1, will autosize based on controls
        int iHeight,            // Height of dialog box.
                                // If -1, will autosize based on controls
        char *pszTitle,         // Text to appear in the dialog banner
        int iFlags)             // Flag bits (Shown in HEX; ORed together)
                                //  1 => Suppress Information Bar

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_DeleteDialog
*
*   Purpose:    Deletes (removes from screen, frees resources) the specified
*               dialog box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_DeleteDialog (          // Returns zero if successful
        int iDlg,                   // ID of dialog box to delete
        int iFlags)                 // Reserved Flags Field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_DeleteAllDialogs
*
*   Purpose:    Deletes (removes from screen, frees resources) all script
*               generated boxes.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_DeleteAllDialogs (      // Returns zero if successful
        int iWaitOnly)              // Reserved Flags Field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetDialogCursor
*
*   Purpose:    To change the cursor that appears over a dialog box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_SetDialogCursor (       // Returns zero if no error
        int iDlg,                   // ID of dialog where cursor displayed
        int iCursor)                // Desired cursor
                                    //  0 = Arrow (default)
                                    //  1 = Application Starting Cursor
                                    //  2 = Wait Cursor

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetDialogTitle
*
*   Purpose:    Replaces the current dialog title with the specified title.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */


    int MSL_SetDialogTitle (        // Returns zero if successful
        int iDlg,                   // ID of dialog box to affect
        char *pszTitle,             // New title string
        int iFlags)                 // Reserved Flags Field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ShowDialog
*
*   Purpose:    Causes the specified dialog box to be displayed or hidden.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ShowDialog (            // Returns zero if successful
        int iDlg,                   // ID of dialog box to affect
        int iVisible,               // Visibility state
                                    // 0 => Hidden, ~0 => Visible
        int iFlags)                 // Reserved Flags Field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_GetAvailableDialogId
*
*   Purpose:    To return to the caller an unused dialog id.
*
*   Notes:
*
*   Revised:    2/17/1997   TLG     Original
*
*   Method: */

    int MSL_GetAvailableDialogId()  // Returns the next available dialog id

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_GetAvailableControlId
*
*   Purpose:    To return to the caller an unused control id from
*               the specified dialog.
*
*   Notes:
*
*   Revised:    2/17/1997   TLG     Original
*
*   Method: */

    int MSL_GetAvailableControlId(  // Returns the next available control id
        int iDlg )                  // ID of dialog in which to search

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_MessageDialog
*
*   Purpose:    To display a message and wait for the user to respond.
*
*   Notes:      Control will not return to the caller until one of the
*               buttons on the dialog has been clicked.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_MessageDialog (         // Returns selected button
                                    //    0 => Message Box Failed
                                    //    1 => OK
                                    //    2 => Cancel
                                    //    3 => Retry
                                    //    4 => Abort
                                    //    5 => Ignore
                                    //    6 => Yes
                                    //    7 => No
        int  iDlgParent,            // Optional ID of parent dialog
        char *pszTitle,             // Text to appear in title bar
        char *pszMsg,               // Text to appear in window
        int  iIcon,                 // Icon selection
                                    //    0 => none
                                    //    1 => Information
                                    //    2 => Exclamation
                                    //    3 => Question
                                    //    4 => Stop
        int  iBtn,                  // Button selection
                                    //    1 => OK
                                    //    2 => OK/Cancel
                                    //    3 => Retry/Cancel
                                    //    4 => Abort/Retry/Ignore
                                    //    5 => Yes/No
                                    //    6 => Yes/No/Cancel
        int  iDefBtn,               // Default button (1-3)
        int  iFlags)                // Reserved flags field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SelectFileDialog
*
*   Purpose:    Display a file selection dialog box.
*
*   Notes:      Control will not return to the caller until a file selection
*               has been made or the user selected the cancel button.
*
*   Revised:    2/25/1997   TLG     Original
*
*   Method: */

    int MSL_SelectFileDialog (  // Returns zero if file selected
        int  iDlgParent,        // Optional ID of parent dialog
        char *pszDlgTitle,      // Optional Title of File Selection Dialog
        char *pszFilterSpec,    // Optional File Filter Specification
                                //  (i.e. "Text Files (*.txt; *.t)|*.txt;*.t|All Files (*.*)|*.*||" )
        char *pszDefExt,        // Optional Default File Extension
        char *pszInitDir,       // Optional Initial Directory
        char *pszFilePath,      // Returned full file path (dir\name) selected by user
        int  iMaxPath,          // Maximum length of path string
        char *pszFileName,      // Returned file name only (no dir) selected by user
        int  iMaxName,          // Maximum length of name string
        int  *piROnly,          // Returned read only flag setting
        int iFlags)             // Flag bits (Shown in HEX;  ORed together)
                                //  1 => Make this a Save as dialog

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateCollection
*
*   Purpose:    Creates a collection control.
*
*   Notes:      A collection control allows the script writer to affect
*               multiple controls with a single function call.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateCollection (      // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int *piConList,             // List of existing controls
                                    //  May be a comma dilimited string
        int iControls,              // Number of controls in list
                                    //  Must be zero if ConList is a string
        int iFlags)                 // Reserved Flags Field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateComboBox
*
*   Purpose:    Creates a combo (or drop down list) box control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateComboBox (        // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Optional label.  By default, the label
                                    //  appears to the left of the combo box.
                                    //  A flag may be specified to make it
                                    //  appear on top (left justified).
        char *pszHelp,              // Optional help text.
        char *pszVal,               // Optional address of variable to contain
                                    // the current selection.
        int iMaxLen,                // Max length of user supplied variable.
        int iFlags)                 // Flag bits (Shown in HEX; ORed together)
                                    //  1 => Use monospaced font for contents
                                    //  2 => Use monospaced font for label
                                    //  4 => Indicates that the label (if
                                    //       specified) must appear on top of
                                    //       the combo box.
                                    //400 => Auto sort list alphabetically.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateEditBox
*
*   Purpose:    Creates an edit box control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateEditBox (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Optional label.  By default, the label
                                    //  appears to the left of the edit box.
                                    //  A flag may be specified to make it
                                    //  appear on top (left justified).
        char *pszHelp,              // Optional help text.
        void *pvVal,                // Optional address of variable to contain
                                    // the current edit box value.
        char *pszType,              // Edit box type: "TEXT", "INT" or "DOUBLE"
                                    //  If "TEXT", a max nbr chars is required!
        double dMinVal,             // Optional Min value (or min nbr characters)
        double dMaxVal,             // Optional Max value (or max nbr characters)
        double dIncVal,             // Value increment/decrement.  Make non-
                                    //  zero if spin control desired.  Not valid
                                    //  for "TEXT" mode edit boxes
        int iMaxLines,              // If not zero, the maximum number of lines
                                    //  of text that may be stored box
                                    //  If zero, the number if lines are limited only
                                    //  by the capacity of the edit box.
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
                                    //  2 => Use monospaced font for label
                                    //  4 => Indicates that the label (if
                                    //       specified) must appear on top of
                                    //       the edit box.
                                    //  8 => Read only flag.  If set, the value
                                    //       of the edit box cannot be changed
                                    //       by the user
                                    // 10 => Value required flag.  If set, user
                                    //       will be forced to enter a value
                                    //       before dialog is auto dismissed
                                    // 20 => Use Min value
                                    // 40 => Use Max value
                                    // 80 => Multiline Text Box
                                    //100 => Center Text (multiline only)
                                    //200 => Right Justify Text (multiline only)
                                    //2000=> Include a horizontal scroll bar

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateGroupBox
*
*   Purpose:    Creates a group box control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateGroupBox (        // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Text to appear in upper left corner
                                    // of the group box
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
 
/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateLabel
*
*   Purpose:    Creates a text label control.
*
*   Notes:      The width and height are dermined by the number of "\n"
*               imbeded in the string and the max length of each line.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateLabel (           // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Text to appear in the label
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //   1 => Use monospaced font for contents
                                    // 100 => Center Text
                                    // 200 => Right Justify Text
                                    //1000 => Put a border around the label
 
/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateListBox
*
*   Purpose:    Creates a list box control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateListBox (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Optional label.  By default, the label
                                    //  appear on top of the list box.
        char *pszHelp,              // Optional help text.
        char *pszVal,               // Optional address of variable to contain
                                    //  the current selection.
        int iMaxLen,                // Max length of user supplied variable.
        int iMinEntries,            // Minimum required entries.  This value
                                    //  would be checked after an auto hide,
                                    //  auto verify push button is invoked.
                                    //  If an insufficent number of entries
                                    //  exist, the user will be notified.
        int iMaxEntries,            // Maximun number of entries allowed.
                                    //  As records are added to the list box
                                    //  this value will be checked.  If the
                                    //  number will exceed the limit one of
                                    //  two possible actions will take place
                                    //   1. If entry appended via script, the
                                    //      top entry will be deleted.
                                    //   2. If entry added via user through
                                    //      a linked list box, that entry will
                                    //      be suppressed and a beep will be
                                    //      sounded.
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
                                    //  2 => Use monospaced font for label
                                    // 10 => Multiple Selection flag.  If set,
                                    //       more than one entry may be
                                    //       selected at the same time.
                                    //400 => Auto sort list alphabetically.
 
/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreatePushBtn
*
*   Purpose:    Creates a push button control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreatePushBtn (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // Text to appear in the push button
        char *pszHelp,              // Optional help text.
        int iRes1,                  // Reserved Arg 1
        int iRes2,                  // Reserved Arg 2
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
                                    // 10 => Default btn flag.  If set, this
                                    //       button will be the default btn.
                                    // 20 => Auto Hide flag.  If set, the dialog
                                    //       will be dismissed when the user
                                    //       clicks on this button.
                                    // 40 => Auto Verify flag.  If set, all
                                    //       edit boxes with the required flag
                                    //       set, will be checked to see if a
                                    //       value has been entered before the
                                    //       dialog may be auto dismissed.
                                    //       If an edit box is found that has
                                    //       not been initialized, the user
                                    //       will be signaled.
                                    //800 => Disabled unless being waited for
                                    //       with MSL_WaitControl() or
                                    //       MSL_WaitControlList()

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateRadioBtn
*
*   Purpose:    Creates a radio button control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateRadioBtn (        // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // The button's text label
        char *pszHelp,              // Optional help text.
        int *piVal,                 // Address of variable to contain state
        int iGrp,                   // Radio group id
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
                                    // 20 => Display the label to the left of the
                                    //       radio button

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateScrollBar
*
*   Purpose:    Creates a scroll bar control.
*
*   Notes:      The scroll bar may be attached to an edit box, label or
*               group box.  The attached control (if any) will display the
*               current value of the scroll bar.  If an edit box is used (and
*               it's not in read-only mode), it may be used to change the
*               value of the scroll bar.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateScrollBar (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iSize,                  // Length in spaces of bar.  This may
                                    //  be vertical or horizontal depending on
                                    //  the value of the flags field.
        char *pszHelp,              // Optional help text.
        double *pdVal,              // Optional address of variable to contain
                                    //  the current scroll bar value.
        double dMinVal,             // Minimum value of the scale bar
        double dMaxVal,             // Maximum value of the scale bar
        double dSingInc,            // Single step increment value
        double dPageInc,            // Page step increment value
        int    iAttachCon,          // Optional ID attached control.  Must be
                                    //  an edit box, label or group box
        int    iFlags)              // Flag bits (Shown in HEX;  ORed together)
                                    // 10 => Orient scroll bar vertically.
                                    //       By default it will be horizontal
                                    // 20 => Flip direction of increasing value
                                    //       Def: left to right; Top to Bottom

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_CreateToggleBtn
*
*   Purpose:    Creates a toggle button control.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_CreateToggleBtn (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control to appear
        int iCon,                   // ID to be assigned to control
        int iX,                     // Location in spaces from left
        int iY,                     // Location in spaces from top
        int iWidth,                 // Horizontal size of control
        int iHeight,                // Vertical size of control
        char *pszLabel,             // The button's text label
        char *pszHelp,              // Optional help text.
        int *piVal,                 // Address of variable to contain state
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Use monospaced font for contents
                                    //  8 => Read only flag.  If set, the state
                                    //       of the toggle button cannot be changed
                                    //       by the user
                                    // 20 => Display the label to the left of the
                                    //       toggle button

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_BtnSetSelectFile
*
*   Purpose:    Configures a push button to create a file selection dialog
*               box when it (the button) is clicked.
*
*   Notes:      The selected file (if any) will be stored in the caller
*               provided buffers (pszFilePath and pszFileName) as well as
*               the specified target control (i.e. an edit control).
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_BtnSetSelectFile (	// Returns zero if successful
        int iDlg,               // ID of dialog where control exists
        int iCon,               // ID of push button control
        int iTargetCon,         // ID of control to receive selected file text
        char *pszDlgTitle,	    // Optional Title of File Selection Dialog
        char *pszFilterSpec,    // Optional File Filter Specification
                                //  (i.e. "Text Files (*.txt; *.t)|*.txt;*.t|All Files (*.*)|*.*||" )
        char *pszDefExt,        // Optional Default File Extension
        char *pszInitDir,       // Optional Initial Directory
        char *pszFilePath,      // Returned full file path (dir\name) selected by user
        int  iMaxPath,          // Maximum length of path string
        char *pszFileName,      // Returned file name only (no dir) selected by user
        int  iMaxName,          // Maximum length of name string
        int  *piROnly,          // Returned read only flag setting
        int iFlags)             // Flag bits (Shown in HEX;  ORed together)
                                //  1 => Make this a Save as dialog

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_BtnGetValue
*
*   Purpose:    Gets the value of a toggle or radio button control
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_BtnGetValue (           // Returns button value (0=Off, 1=On)
        int iDlg,                   // ID of dialog where control exists
        int iCon)                   // ID of control

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_BtnSetValue
*
*   Purpose:    Sets the value of a toggle or radio button control
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_BtnSetValue (           // Returns previous button value
                                    //  (0=Off, 1=On)
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iValue)                 // New button value (0=Off, ~0=On)

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EditGetValue
*
*   Purpose:    Gets the value of an edit box control
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EditGetValue (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        void *pvValue,              // Pointer to buffer to receive value.
                                    //  Actual type depends on the edit box
                                    //  type (i.e. "TEXT", "INT" or "DOUBLE")
        int iMaxLen)                // If in "TEXT" mode, the max length of
                                    //  the string buffer specified by pvValue. 

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EditReadFile
*
*   Purpose:    Loads an edit box with the contents of the specified file.
*
*   Notes:      This function is only valid for edit boxes of type "TEXT"
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EditReadFile (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszFile,              // Name of File to be loaded.
        int iAppend)                // If set, the file contents will
                                    //  be appended to rather than replace the
                                    //  current edit box value.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EditSetLimits
*
*   Purpose:    To set the limits/increment of an edit box
*
*   Notes:      Only valid for edit boxes of type "INT" or "DOUBLE".
*               If called for an edit box of type "TEXT" it will be
*               ignored.
*               If the ID of this edit box was passed to the 
*               MSL_CreateScrollBar() function such that it is now
*               displaying the value of the scroll bar, this call
*               will be ignored.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EditSetLimits (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        double dMinVal,             // Minimum value of the scale bar
        double dMaxVal,             // Maximum value of the scale bar
        double dIncVal,             // Single step increment value
        int iFlags)                 // Reserved flags field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EditSetValue
*
*   Purpose:    Sets the value of an edit box control
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EditSetValue (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        void *pvValue,              // Pointer to value.  Actual type depends
                                    //  on the edit box type (i.e. "TEXT", "INT"
                                    //  or "DOUBLE")
        int iAppend)                // If set and in "TEXT" mode, value will
                                    //  be appended to rather than replace the
                                    //  current edit box value.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EditWriteFile
*
*   Purpose:    Writes the contents of the edit box to the specified file.
*               If the file does not exist, it will be created.
*
*   Notes:      This function is only valid for edit boxes of type "TEXT"
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EditWriteFile (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszFile,              // Name of File to be opened/created
        int iAppend)                // If set, text will be appended to
                                    //  the end of the file.  Otherwise
                                    //  the entire file will be replaced.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_InfoShowProg
*
*   Purpose:    Displays a label followed by a % complete indicator.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_InfoShowProg (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        char *pszLabel,             // Label to display in info bar
        int  iProgress,             // Value indicates % complete
        char *pszStep)             // Optional current step string

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_InfoShowHelp
*
*   Purpose:    Puts the information bar back into the mode where it
*               displays the help associated with the control that has
*               input focus.
*
*   Notes:      You need only call this function after using the
*               MSL_InfoShowProg() function.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_InfoShowHelp (          // Returns zero if successful
        int iDlg)                   // ID of dialog where control exists

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListDelIndex
*
*   Purpose:    Deletes the list box entry indicated by the index
*
*   Notes:      List box indexes start at zero.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListDelIndex (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iIndex)                 // Index of list box entry to delete.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListDelValue
*
*   Purpose:    Deletes the list box entry with a matching value
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListDelValue (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszStr)               // String to identify list box entry.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListGetEntries
*
*   Purpose:    Returns the total number of entries in a list box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListGetEntries (        // Returns number of list box entries
        int iDlg,                   // ID of dialog where control exists
        int iCon)                   // ID of control

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListFreeSelValue
*
*   Purpose:    To free the memory allocated by the MSL_ListGetSelValue()
*               function.
*
*   Notes:      This function should be called each time MSL_ListGetSelValue
*               is invoked (after the selections have been inspected/copied)
*               to free the memory that had been allocated for each
*               selection.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    void MSL_ListFreeSelValue (     // Returns number of selections
        char **ppszStr,             // Pointer an array where string pointers
                                    //  are currently loaded.
        int  iEntries)              // Number of array entries.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListGetSelValue
*
*   Purpose:    Returns the current list/combo box selection(s).
*
*   Notes:      For each selection, this function allocates memory.  This
*               memory should be freed when the caller is finished inspecting
*               and/or coping the list of selections.
*               Use MSL_ListFreeSelValue() to release that memory.  Just pass
*               it the array of string pointers and the number of selections
*               that was returned by this function.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListGetSelValue (       // Returns number of selections
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char **ppszStr,             // Pointer an array where string pointers
                                    //  may be loaded.
        int  iMaxEntries)           // Max number of array entries.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListGetSelIndex
*
*   Purpose:    Returns the current list/combo box selection(s).
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListGetSelIndex (       // Returns number of selections
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int *piSelList,             // Pointer an array where indexes of the
                                    //  selected list entries are stored
        int  iMaxEntries)           // Max number of array entries.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListGetValue
*
*   Purpose:    Returns a specific list box entry.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListGetValue (          // Returns the actual length of the string
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iIndex,                 // Index of list box entry to fetch
        char *pszStr,               // Address of string buffer to be loaded
        int  iMaxLen)               // Max size of string buffer.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListLink
*
*   Purpose:    To link to list boxes together so that entries may be moved
*               from one to the other or (in the case of a fixed list)
*               copied from the fixed list to the non-fixed list.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListLink (              // Returns zero if successful
        int iDlg,                   // ID of dialog where controls exist
        int iCon1,                  // ID of first list box
        int iCon2,                  // ID of second list box
        int iFixedCon,              // ID of the fixed list (if any).  Must
                                    //  match iCon1 or iCon2 or be zero.
        int iClicks)                // Number of Btn clicks required to
                                    //  move/copy entries from one list to
                                    //  another (1 or 2)

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListLoadValues
*
*   Purpose:    Loads the an array of strings into the list box.
*               Each string becomes an entry in the list box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListLoadValues (        // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszItems,             // String with one or more items
        int iDelimiter,             // Item delimiter character
        int iAppend)                // If set, file data will be appended to
                                    //  existing entries.  Otherwise, any
                                    //  existing entries will be replaced.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListReadFile
*
*   Purpose:    Loads the contents of a ASCII file into the list box.
*               Each line of the file becomes an entry in the list box.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListReadFile (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszFile,              // Name of file to read
        int iAppend)                // If set, file data will be appended to
                                    //  existing entries.  Otherwise, any
                                    //  existing entries will be replaced.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListRecDepControls
*
*   Purpose:    Specifies the controls whose value is dependent on the
*               current selection index of this list or combo box,
*
*   Notes:      The specified controls will be ignored if the list box
*               is in multiselection mode.
*
*               When any control that has a user changable value is created
*               by the script, it may be passed an address of where to store
*               that value.  It's this address that may be dependent on
*               what entry (or record) in a list box is currently selected.
*
*               Therefore, when the current selection index changes (whether
*               by user or by script), all record dependent controls will be
*               updated with the appropriate offset to employ when accessing
*               the value address assigned to them.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListRecDepControls (    // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int *piConList,             // List of record dependent controls
        int iControls)              // Number of controls in list.

/******************************************************************************/


/*******************************************************************************
*
*   Function:   MSL_ListSetSelValue
*
*   Purpose:    Allows the caller to specify the value of the entry that
*               should be selected.
*
*   Notes:      If in multi-select mode, no existing selections will be
*               removed unless the "iExclusive" flag is set.
*               If in single-select mode, the existing selection (if any)
*               will be removed regardless of the value of the "iExclusive"
*               flag.
*               If the specified value is not already in the list box,
*               the function will do nothing.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListSetSelValue (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszStr,               // Value of entry to be selected.
        int  iExclusive)            // If set, any existing selections will be
                                    //  removed (multi-selection mode only)

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListSetSelIndex
*
*   Purpose:    Allows the caller to specify the index of the entry that
*               should be selected.
*
*   Notes:      If in multi-select mode, no existing selections will be
*               removed unless the "iExclusive" flag is set.
*               If in single-select mode, the existing selection (if any)
*               will be removed regardless of the value of the "iExclusive"
*               flag.
*               If the specified index is not already in the list box,
*               the function will do nothing.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListSetSelIndex (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iIndex,                 // Index of entry to be selected.
        int iExclusive)             // If set, any existing selections will be
                                    //  removed (multi-select mode only)

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListSetValue
*
*   Purpose:    Allows the caller to specify the value of an entry at a
*               specific index.  By default the entry will be inserted
*               into the list rather than replace an existing entry.
*
*   Notes:      If the specified index exceeds the number of entries in the
*               list box, the value will be added at the end of the list.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListSetValue (          // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iIndex,                 // Index of entry to be loaded
        char *pszStr,               // New value of entry
        int iReplace)               // If set, an existing entry (at the
                                    //  specified index) will be replaced
                                    //  rather than be moved down in the list.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ListWriteFile
*
*   Purpose:    Writes the contents of the list box to a file.
*               Each list box entry becomes a separate line of text in
*               the file.
*               If the file does not exist, it will be created
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ListWriteFile (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszFile,              // Name of file to opened/created
        int iAppend)                // If set, text will be appended to
                                    //  the end of the file.  Otherwise
                                    //  the entire file will be replaced.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ScrollGetValue
*
*   Purpose:    Gets the value of a scroll bar control
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    double MSL_ScrollGetValue (     // Returns scale value
           int iDlg,                // ID of dialog where control exists
           int iCon)                // ID of control

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ScrollSetLimits
*
*   Purpose:    To set the scrolling limits/increment of a scroll bar.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ScrollSetLimits (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        double dMinVal,             // Minimum value of the scale bar
        double dMaxVal,             // Maximum value of the scale bar
        double dSingInc,            // Single step increment value
        double dPageInc,            // Page step increment value
        int iFlags)                 // Reserved flags field

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ScrollSetValue
*
*   Purpose:    Sets the value of a scroll bar control
*
*   Notes:      The new value will be adjusted if necessary so that
*               it is an exact multiple of increments from the
*               minimum scroll value.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    double MSL_ScrollSetValue (      // Returns previous scroll value
           int iDlg,                // ID of dialog where control exists
           int iCon,                // ID of control
           double dValue)           // New value of the scale bar

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_DeleteControl
*
*   Purpose:    Removes control from dialog and frees any resources
*               associated with the control.
*
*   Notes:      If the specified control is a collection, and the members
*               flag is set, all members of the collection will be deleted.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_DeleteControl (         // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iMembers)               // If set and a collection control, delete
                                    //  all members of the collection as well. 

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_EnableControl
*
*   Purpose:    To set the control's enabled/disabled state.
*
*   Notes:      If the specified control is a collection, all members
*               of the collection will be affected.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_EnableControl (         // Returns current enable/disable state
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iEnable)                // New enable state (0=Disabled, 1=Enabled)
                                    //  If -1, no state change will be made

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_GetControlGeom
*
*   Purpose:    To fetch the specified control's location and size.
*
*   Notes:      The returned values are in pixel units!  The X,Y values
*               refer to the upper left hand corner of the control.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_GetControlGeom (        // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int *piX,                   // Pointer to X location buffer
        int *piY,                   // Pointer to Y location buffer
        int *piWidth,               // Pointer to Width buffer
        int *piHeight)              // Pointer to Height buffer

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetControlFocus
*
*   Purpose:    To set input focus to a particular control within a dialog
*               box.  This function will do nothing if the specified
*               control is not dynamic, visible and enabled.
*               However, if the control is a collection, the first dynamic,
*               visible control in the collection will receive input focus.
*
*   Notes:      When a dialog box is shown for the first time, the first
*               created dynamic/enabled control will receive input focus.
*               After that, the user may change which control has input
*               focus by using the TAB key or by clicking on a control
*               with the mouse.
*               You would use this function to direct the user's attention
*               to a specific control.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_SetControlFocus (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon)                   // ID of control to receive input focus

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetControlLabel
*
*   Purpose:    To set the label text for a control.
*
*   Notes:      This function will be ignored if the specified control does
*               not have a label associated  with it.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_SetControlLabel (       // Returns zero if successful
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        char *pszLabel)             // Pointer to the new label text

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetControlMaster
*
*   Purpose:    To make the specified control a slave of some other
*               existing control.
*
*   Notes:      You may use this function to free a slave control by making
*               the value of the master control ID zero.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_SetControlMaster (      // Returns zero if successful
        int iDlg,                   // ID of dialog where controls exist
        int iCon,                   // ID of control
        int iConMaster,             // ID of master control. Set to zero to
                                    // free a slave control from its master.
        void *pvValue,              // Required master control value for slave
                                    //  control to be enabled and/or visible.
                                    //  The type of value depends on the
                                    //  the master control type.
                                    //  For edit boxes, this may be null to
                                    //  indicate that a blank edit box enables
                                    //  and/or shows the slave control.
        double dRange,              // If the master control's value is a
                                    //  double or integer, a range may be
                                    //  specified.  If the value of the master
                                    //  falls within this range, it's considered
                                    //  a match.
                                    //  i.e.  (base <= value <= base+range)
        int iAction,                // Action to take if value matches or
                                    //  falls within the specified range.
                                    //  1 => Enable Control
                                    //  2 => Disable Control
                                    //  3 => Show Control
                                    //  4 => Hide Control
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //  1 => Do nothing if there is no match
                                    //       By default the opposite action
                                    //       (of the one specified) will be
                                    //       taken.
                                    //  2 => If master a list or combo box
                                    //       control, consider value an index.
                                    //       Otherwise it's a string.
                                    //  4 => If master an edit, list or combo
                                    //       box control, consider any non-null
                                    //       value as the required state.
                                    //       Otherwise an exact match must be
                                    //       made in order to take the specified
                                    //       action on the control.
                                    //  8 => Do action if master value does
                                    //       not match the specified value.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_SetControlPos
*
*   Purpose:    To set the position and/or size of the control.
*
*   Notes:      This function will not operate on a collection control.
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_SetControlPos (         // Returns zero if no error
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iX,                     // New X location of control origin
        int iY,                     // New Y location of control origin
        int iWidth,                 // New width of control
        int iHeight,                // New height of control
        int iRes,                   // Reserved argument
        int iFlags)                 // Flag bits (Shown in HEX;  ORed together)
                                    //   1 => Update origin
                                    //   2 => Update size

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_ShowControl
*
*   Purpose:    To set the control's visibility state.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_ShowControl (           // Returns previous visibility state
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        int iVisible)               // New visibility state (0=Hide, 1=Show)
                                    //  If -1, no state change will be made

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_UpdateControl
*
*   Purpose:    To refresh the displayed value in the control
*
*   Notes:
*
*   Revised:    2/18/1997   TLG     Original
*
*   Method: */

    int MSL_UpdateControl (         // Returns zero if no error
        int iDlg,                   // ID of dialog where control exists
        int iCon )                  // ID of control

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_WaitControl
*
*   Purpose:    To pause script execution until the specified control is
*               affected or the timeout expires.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_WaitControl (           // Returns ID of control if it changed.
                                    //  Returns zero if timeout expired.
        int iDlg,                   // ID of dialog where control exists
        int iCon,                   // ID of control
        double dTimeout)            // Wait timeout (in seconds)
                                    //  A value of -1 means wait forever

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_WaitControlList
*
*   Purpose:    To pause script execution until any one (or all) of specified
*               controls is (are) affected or the timeout expires.
*
*   Notes:
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_WaitControlList (       // Returns ID of 1st control that changed.
                                    //  Returns zero if timeout expired.
        int iDlg,                   // ID of dialog where controls exist
        int *piConList,             // Array of control IDs
                                    //  May be a comma delimited string
        int iControls,              // Number of controls in the array
                                    //  Must be zero if using string
        double dTimeout,            // Wait timeout (in seconds)
                                    //  A value of -1 means wait forever
        int iAll)                   // If set, wait for all controls rather
                                    //  than just the first to be affected.

/******************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_Beep
*
*   Purpose:    To generate simple tones on the speaker.
*
*   Notes:      This is the WIN32 Beep() function
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    int MSL_Beep (                  // Returns zero if successful
        int iFreq,                  // Sound frequency (in Hz)
        double dDuration)           // Sound Duration (in seconds)
                                    //  If -1 specified, sound continues
                                    //  until MSL_Beep is called again.

/******************************************************************************/




/*******************************************************************************
*
*   Function:   MSL_GetScreenSize
*
*   Purpose:    To fetch the system's screen size as well the average
*               size of a character.
*
*   Notes:      The returned values are in pixel units!  The character
*               width & height are used internally to convert character
*               coordinates into pixel coordinates
*               
*
*   Revised:    5/15/1995   TLG     Original
*
*   Method: */

    void MSL_GetScreenSize (            // No return value
        int *piScrWidth,                // Returned Screen Width
        int *piScrHeight,               // Returned Screen Height
        int *piChrWidth,                // Returned Avg Character Width
        int *piChrHeight)               // Returned Avg Character Height

/******************************************************************************/




/* That's All */
                                                                                                                                                                                                                                                                                                                                                                                                                    