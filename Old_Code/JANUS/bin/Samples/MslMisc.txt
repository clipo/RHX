/*****************************************************************************
*
*   Function:   MSL_IsInstrumentOpen
*
*   Purpose:    To return a boolean indicating whether or not the
*               CAN driver has been opened.
*
*   Method: */

int MSL_IsInstrumentOpen()      // 0=not open, 1=open

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_NumberOfDilutors
*
*   Purpose:    To return the number of tips available on the pipetting arm.
*               This value may be 4 or 8.
*
*   Method: */

int MSL_NumberOfDilutors()      // Returns number of tips in this instrument

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   EGS_GetEvaluationLevel
*
*   Purpose:    To return the current EGS execution evaluation level.
*
*   Notes:      In general, the higher the evaluation level, the more
*               activities are suppressed.  The following levels are supported:
*
*               0   Normal Execution
*               1   Generate EGS sequences but don't invoke pre/post step
*                   callbacks and don't move to targets
*               2   Invoke pre/post step callbacks (when specified) but
*                   don't move to targets.
*               3   Move to targets but don't pipette
*
*               Assembly change operations are performed regardless of
*               the evaluation level.  This prevents the evaluation from
*               running indefinately if the user is not there to stop it.
*
*   Method: */

int EGS_GetEvaluationLevel()    // Return current level

/****************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_SetEvaluationLevel
*
*   Purpose:    To load the EGS execution evaluation level.
*
*   Notes:      In general, the higher the evaluation level, the more
*               activities are suppressed.  The following levels are supported:
*
*               0   Normal Execution
*               1   Generate EGS sequences but don't invoke pre/post step
*                   callbacks and don't move to targets
*               2   Invoke pre/post step callbacks (when specified) but
*                   don't move to targets.
*               3   Move to targets but don't pipette
*
*               Assembly change operations are performed regardless of
*               the evaluation level.  This prevents the evaluation from
*               running indefinately if the user is not there to stop it.
*
*   Method: */

int EGS_SetEvaluationLevel(     // Return previous level
    int iNewLevel )             // The new EGS evaluation level

/****************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_SetSingleStep
*
*   Purpose:    To set/clear the EGS single step mode
*
*   Notes:      A non-zero single step mode implies that EGS execution
*               should pause before each step is executed.
*
*   Method: */

int EGS_SetSingleStep(     // Return previous state
    int iNewMode )      // The new egs single step mode

/****************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_SetNextDilutor
*
*   Purpose:    To set the prefered next dilutor number.
*
*   Notes:      The term "prefered" is used because if the indicated dilutor
*               cannot reach all positions to which it is assigned (in the
*               subsequent pipetting sequence), another dilutor will be
*               selected internally.
*
*   Method: */

int EGS_SetNextDilutor(     // Returns the next dilutor number
    int iDilutor)           // The prefered next dilutor number (1-4)

/****************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_GetLiquidOperation
*
*   Purpose:    To retrieve a copy of the EGS operation at the specified
*               index.
*
*   Notes:      The operation code is optional.  If specified, a value of
*               FAIL will be returned if it does not match the operation
*               at the specified index.
*               CALLABLE ONLY FROM A PRE OR POST STEP FUNCTION!
*
*   Method: */

int EGS_GetLiquidOperation(     // SUCCESS or FAIL
    int iEGSStep,               // The EGS step index for the current sequence
    int iOperation,             // Optional EGS operation code (0 if not in use)
    PLIQUIDOP pLiquidOp,        // Address of structure to be loaded
    int iSize)                  // Size (in bytes) of the above liq. operation structure

/****************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_SetLiquidOperation
*
*   Purpose:    To load the specified EGS record with the specified liquid
*               operation structure.
*
*   Notes:      The operation code is not optional here.  It must match
*               the operation code of the EGS record at the specified
*               index.
*               CALLABLE ONLY FROM A PRE OR POST STEP FUNCTION!
*
*   Method: */

int EGS_SetLiquidOperation(     // SUCCESS or FAIL
    int iEGSStep,               // The EGS step index for the current sequence
    int iOperation,             // EGS operation code
    PLIQUIDOP pLiquidOp,        // Address of structure to be copied
    int iSize)                  // Size (in bytes) of the above liq. operation structure

/****************************************************************************/



/*******************************************************************************
*
*   Function:   MSL_GetEgsContext()
*
*   Purpose:    To return the current EGS context.
*
*   Notes:      The structure MP2_EGS_CONTEXT is defined in WinPREP.s
*
*   Method: */

    int MSL_GetEgsContext(          // Return 0 if successful

        MP2_EGS_CONTEXT *pContext,  // Pointer to memory to receive the context.
        int nSize )                 // Size of context structure

/******************************************************************************/




/*******************************************************************************
*
*   Function:   MSL_GetErrorContext()
*
*   Purpose:    To return the last error context.
*
*   Notes:      The structure MP2_ERR_CONTEXT is defined in WinPREP.s
*
*   Method: */

    int MSL_GetErrorContext(    // Return 0 if successful

        MP2_ERR_CONTEXT *pContext,  // Pointer to memory to receive the context.
        int nSize )                 // Size of context structure

/******************************************************************************/




/*****************************************************************************
*
*   Function:   EGS_SetNextDilutor
*
*   Purpose:    To specify the next dilutor to be used.
*
*   Notes:      Must be a number between 1 and 4.
*
*   Method:  */

int EGS_SetNextDilutor(int iDilutor)

/****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_AssemChngWellMap
*
*   Purpose:    Support function to execute one or more assembly
*               change operations (i.e. one per rack found in the caller
*               specified well map).
*
*   Notes:
*
*   Method: */

int MSL_AssemChngWellMap(       // Returns  0 for SUCCESS
                                //         -1 for Quit Test
                                //          2 for Quit Procedure
    MP2_WELLMAP_DEF* pMap )     // Well map structure ptr.

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_AssemChngRack
*
*   Purpose:    Support function to execute an assembly change on
*               a single rack.
*
*   Notes:
*
*   Method: */

int MSL_AssemChngRack(          // Returns  0 for SUCCESS
                                //         -1 for Quit Test
                                //          2 for Quit Procedure
    char* pszRackName )         // Name of rack to assembly change

/*****************************************************************************/




/*******************************************************************************
*
*   Function:   MSL_GetLastAssemChngRack()
*
*   Purpose:    To return the current assembly change rack.
*
*   Method: */

int MSL_GetLastAssemChngRack(       // Returns length of rack name
    char* pszRackName,              // Address of where to store the rack name
    int   nMaxLen )                 // Max length of the rack name buffer

/******************************************************************************/



/*****************************************************************************
*
*   Function:   EGS_UseMachineSafeTravel
*
*   Purpose:    Specifies which safe travel height to use.  Normally, the
*               highest safe travel height of all the racks on the deck is
*               used when moving between racks.  This function can be used
*               to overide this behavior and use the machine safe travel
*               instead.
*
*               This is a special purpose function provided for the high level
*               utilities.  Allows a diagnostic test be run without
*               necessarily having to remove all the labware.
*
*   Method: */

int EGS_UseMachineSafeTravel(   // Returns previous value
    int bUseMachine)            // 0=no (use rack safe travel)
                                // 1=yes (use machine safe travel)

/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetVersionNumbers()
*
*   Purpose:    To return the MSL version numbers
*
*   Method: */

void MSL_GetVersionNumbers(
     int *pnMajor,      // Ptr to integer to store MSL's major version nbr
     int *pnMinor,      // Ptr to integer to store MSL's minor version nbr
     int *pnBuild )     // Ptr to integer to store MSL's build nbr

/****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_GetSerialNumber()
*
*   Purpose:    To get the serial number of the instrument.
*
*   Method  */

int MSL_GetSerialNumber(        // Returns 0 if successful
    LPSTR lpszBuffer,           // where to store the result
    int nChars )                // number of characters in buffer

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_MarkTipPos
*
*   Purpose:    To set the disposable tip state for the specified tip box
*               rack and position.
*
*   Notes:
*
*   Method: */

int MSL_MarkTipPos(

    char* pszRack,              // Rack name
    int   nWell,                // Well position
    int   nMark)                // Value to mark the position
                                //  -1 : Mark position as unusable
                                //   0 : Mark position as empty
                                //   1 : Mark position as containing a tip.

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_ResetTipBoxesDialog()
*
*   Purpose:    Displays a dialog which allows the user to reset the
*               currently open tip boxes.
*
*   Notes:
*
*   Method: */

int MSL_ResetTipBoxesDialog()

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_VerifyLabwareDialog()
*
*   Purpose:    Displays a dialog which allows the user to verify the locations
*               of the currently open labware.
*
*   Notes:
*
*   Method: */

int MSL_VerifyLabwareDialog()

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_NetMessageBufferSend()
*
*   Purpose:    To display a dialog box on a caller specific computer (must
*               on the network) with a caller specific message.
*
*   Notes:
*
*   Method: */

int MSL_NetMessageBufferSend(   // Returns 0 if successful
    char *pszToName,            // Name of computer to receive message
    char *pszMsg )              // Message text

/*****************************************************************************/

