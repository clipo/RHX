MslMove.txt
-----------

Summary of the common functions in the mslmove.dll used for moving motors and pumps.

See also the MoveLoop procedure in the RandomMoveTest diagnostic in WinPREP for examples
of how to use these functions.



Overview of Moving Motors and Pumps:
-----------------------------------

Typical sequence of function calls to simultaneously move motors and pumps:
- MSL_SetMotorNextMove(i)	Set local parameters for each motor to be moved
- MSL_SetPumpNextMove(i)	Set local parameters fo each pump to be moved
- MSL_AdjustYVSpeeds()          (8 tip only) Adjust Y & V speeds and predelays
- MSL_SendMotorsForward()	Send parameters to all motors
- MSL_SendPumpsForward()	Send parameters to all pumps
- MSL_StartMovementMotors()	Start all motors
- MSL_StartMovementPumps()	Start all pumps
- MSL_WaitForMotorsDone()	Wait for all motors to finish (or fault, abort,...)
- MSL_WaitForPumpsDone()	Wait for all pumps to finish
- MSL_FinishAllMotors()		Update local motor parameters (current position ...)
- MSL_FinishAllPumps()		Update local pump parameters


Motor and pump error handling:

In general, the motors/pumps that faulted should have their movement "canceled"
instead of "finished".  Canceling a movement, essentially, updates parameters
w/o changing the "previous" location which is used for error recovery.

Typical sequence with motor errors and no recovery:
- MSL_SetMotorNextMove(i)	Set local parameters for each motor to be moved
- MSL_SetPumpNextMove(i)	Set local parameters fo each pump to be moved
- MSL_AdjustYVSpeeds()          (8 tip only) Adjust Y & V speeds and predelays
- MSL_SendMotorsForward()	Send parameters to all motors
- MSL_SendPumpsForward()	Send parameters to all pumps
- MSL_StartMovementMotors()	Start all motors
- MSL_StartMovementPumps()	Start all pumps
- MSL_WaitForMotorsDone()	Wait for all motors to finish (or fault, abort,...)
- MSL_FinishMotorMovement(i)    Update parameters for each succesful motor
- MSL_CancelMotorMovement(i)    Update parameters for each faulted motor
- MSL_FinishPumpMovement(i)     Update parameters for each succesful pump
- MSL_CancelPumpMovement(i)     Update parameters for each faulted pump

Typical sequence with motor errors and recovery:
- MSL_SetMotorNextMove(i)	Set local parameters for each motor to be moved
- MSL_AdjustYVSpeeds()          (8 tip only) Adjust Y & V speeds and predelays
- MSL_SendMotorsForward()	Send parameters to all motors
- MSL_StartMovementMotors()	Start all motors
- MSL_WaitForMotorsDone()	Wait for all motors to finish (or fault, abort,...)
- MSL_FinishMotorMovement(i)    Update parameters for each succesful motor
- MSL_SendMotorsBackward()	Send parameters for all unfinished (faulted) motors
                                    back to last good position
- MSL_StartMovement()		Start all faulted motors
- MS_WaitForMotorsDone()	Wait for all motors to finish
User can be queried to either retry (repeat sequence starting with
MSL_SendMotorsForward()), or quit (MSL_CancelPumpMovment(i))


Note for pump recovery:
Although the pump functions are symetric with the motor functions, pump errors
usually cannot be cleared without reinitializing.  Even if recovery were
possible, the sample would still be very questionable.  Since reinitializing
the pump homes the syringe, the initialization should only be done when the
tips have been positioned over an appropriate waste labware.



MslMove Constants
-----------------

The definitions shown here are the ones used internally by mslmove.dll. Custom MSL
script code should use the vales shown below, but remember that MSL does not support
#defines.


// return codes
#define SUCCESS           0

// fatal return codes
#define FAIL              -1
#define USER_ABORT        -2
#define COM_ERROR         -3
	
// non-fatal return codes
#define MOVE_ERROR         1
#define STOP_PROC          2

	
// motor/pump error codes:
// these are used both in the function error arrays and in the
// iModuleMoveError field of the motor & pump objects
#define MOVE_ERROR_FAULT   1
#define MOVE_ERROR_TIMEOUT 2
#define MOVE_ERROR_ESTOP   3
#define MOVE_ERROR_DILUTOR 4

// motor handles
#define XMOTOR             1
#define YMOTOR             2
#define VMOTOR             3
#define BCXMOTOR           4
#define BCYMOTOR           5
#define Z1MOTOR            6
#define Z2MOTOR            7
#define Z3MOTOR            8
#define Z4MOTOR            9
#define STRIPMOTOR        10
#define PERIMOTOR         11
#define Z5MOTOR           12
#define Z6MOTOR           13
#define Z7MOTOR           14
#define Z8MOTOR           15

// Unknown last target
#define LOC_LAST_UNKNOWN    -999999999

// motor types
typedef enum 
{ 
	MOTOR_TYPE_X=1,
	MOTOR_TYPE_Y=2,
	MOTOR_TYPE_Z=3,
	MOTOR_TYPE_V=4,
	MOTOR_TYPE_BCX=5,
	MOTOR_TYPE_BCY=6,
	MOTOR_TYPE_STRIP=7,
	MOTOR_TYPE_PERI=8
} MOTOR_TYPE;


// motor move modes
#define MOVE_MODE_MASK 0x0000ffff	// mask for actual move mode
typedef enum
{
    Z_MOVE_MODE_NORMAL      = 0,
    Z_MOVE_MODE_LIQ_DET     = 1,
    Z_MOVE_MODE_CLOT_DET    = 2,          // should be added in MP 1.5 firmware
    MOVE_MODE_HOME          = 3,          // stop at home sensor (eg stripper)
    MOVE_MODE_FORCE         = 0x00010000, // force next move (ignore last target position)
    MOVE_MODE_REAL          = 0x00020000, // target location is real, not virtual
    MOVE_MODE_NOLOG         = 0x00040000, // DB logging not required (eg, get tip fault)
    MOVE_MODE_MULT_STARTS   = 0x00080000, // allow multiple motor starts
    MOVE_MODE_SONIC_OFF     = 0x00100000, // turn off sonication after motor done
    MOVE_MODE_RET_IMMEDIATE = 0x00200000, // return immediate
    MOVE_MODE_GO_HOME       = 0x00400000  // move to home (real location 0, overide
                                              // calculated virtual target)
} MOTOR_MOVE_TYPE;

// pump move modes
typedef enum
{
    PUMP_MODE_SONIC_OFF     = 0x00010000  // turn off sonication after pump done
} PUMP_MOVE_TYPE;


/* valve positions (in degress) */
#define VALVE_SYRINGE_TO_TIP      0
#define VALVE_PERIPUMP_TO_TIP     90
#define VALVE_PERIPUMP_TO_SYSLIQ  180
#define VALVE_SYRINGE_TO_SYSLIQ   270




Motor Move Function Prototypes:
------------------------------

/*****************************************************************************
*
*   Function:   MSL_SetMotorNextMove
*
*   Purpose:    Sets the target location, speed, ramp, pre-move and post-move
*               delays, and move mode for the next move.  This function
*               verifies that the motor has been initialized and the motor
*               speed is within range.  If the speed or ramp is zero, the
*               default motor speed or ramp is used.
*
*               The target range check has been moved from here to
*               MSL_SendMotorsForward/Backward() where the target location is
*               adjusted for deck calibration.  The check is done there since
*               the uncalibrated target could be in range, but the calibrated
*               target out of range.  Also, the calculation involves X, Y, and
*               Z positions together, whereas this function is for an
*               individual motor.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_SetMotorNextMove(       // FAIL or SUCCESS
        int iMotor,             // motor handle (see #defines)
        double dTargetLoc,      // virtual absolute position in mm
        double dMoveSpeed,      // mm/sec
        int iMoveMode,		// move mode (see #defines)
        double dMoveRamp,       // mm/sec/sec
        int iPreDelay,          // pre-move delay in ms
        int iPostDelay)         // post-move delay in ms
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_AdjustYVSpeeds
*
*   Purpose:    For 8 tip (scissor style) varispan assembly, the V motor is really
*               a second Y motor.
*
*               Since the DSP code treats the V motor as though it's location
*               is relative to the Y motor location, the velocity of the V
*               motor is in effect added to the velocity of the Y motor
*               if both motors are moving.
*
*               Therefore if both motors are moving in the same direction
*               (at the default speed), the V motor ends up moving twice as
*               fast as it should.
*
*               This function will calculate the distance each motor is
*               moving (in steps) and then split the velocity of the Y
*               motor between the two based on the relative magnitudes
*               of the moves.
*
*   Method: */

void MSLMOVE_API
    MSL_AdjustYVSpeeds()
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_SendMotorsForward
*
*   Purpose:    Sends motor parameters to the CAN driver in preparation for
*               the next move.  Only motors which are initialized and have
*               the next move initialized (via MSL_SetMotorNextMove) are
*               serviced.  All motors will move to their target location on
*               the next MSL_StartMovement call.
*
*               Prior to sending any commands to the CAN driver, any
*               pending faults are first cleared via MSL_ClearMotorMoveError.
*
*   New:        Implemented 6-16-98 in BCR release for nL requirement:
*               Only motors which are not active (ie, start movement has not
*               been called) are processed.  This allows adding the capability
*               to start motors at different times and then wait for all to
*               complete.  For example, so that Zs can be retracted in nL
*               as each one reaches its retract exit pressure.
*
*               The active flag is set in start movement and reset in wait for
*               motors.  So, multiple calls to this function will now only
*               start unstarted motors, but yet once wait has been called, send
*               motors forward/backward will still move motors for error
*               recovery.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_SendMotorsForward(
        void)
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_StartMovementMotors
*
*   Purpose:    Start all loaded motors (send "go" commands).  Called by
*               MSL_StartMovement.
*
*               If the target position is the same as the previous position
*               (ie, no movement required), then the motor state is left
*               IDLE and the "go" command not sent.orce a response.
*
*   Note1:      Rather than relying on the virtual target and previous
*               positions, MSL_SendMotorsForward/Backward makes the determination
*               by comparing the actual target values being sent to the DSP, and
*               then setting a flag in the motor object for use here.  This is
*               because the virtual positions can be the same even though
*               the real encoder positions are different.  For example, the
*               virtual safe travel height before and after picking up a
*               disposable tip is the same, but the real position is not
*               (the Z motor is recalibrated after getting a DT).
*
*   Method:                                                                 */

    int MSL_StartMovementMotors(    // FAIL or SUCCESS
        void)
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_WaitForMotorsDone
*
*   Purpose:    Wait for all motors to finish movement or timeout.  Only
*               waits for motors marked active and without errors.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_WaitForMotorsDone(  // FAIL, SUCCESS, USER_ABORT, COM_ERROR, MOVE_ERROR
        int iMinTimeOut)    // minimum wait in sec before timeout
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_FinishAllMotors
*
*   Purpose:    "Finishes" the motor move sequence for all motors that have
*               been initialized, a move pending, and no error.  This
*               function should be called after calling MSL_WaitForMotorsDone
*               and only if all the motor moves were successful.  If any
*               errors occured, MSL_CancelMotorMovement should be used for
*               motors with the error, and MSL_FinishMotorMovement for the
*               motors w/o an error.
*
*               In addition, a query of the motor location is done if the
*               query flag is set.  Typically, a query is not required--since
*               the target position is valid if the move was successful.  The
*               query mode would be used when moving to liquid.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_FinishAllMotors(        // FAIL or SUCCESS
        int bQueryLocation)
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_FinishMotorMovement
*
*   Purpose:    "Finishes" a motor move sequence.  First verifies that the
*               motor has been initialized, a move was pending, and no error
*               occured.  This function should be called after calling
*               MSL_WaitForMotorsDone and only if the move was successful.
*               Motors which had an error should use MSL_CancelMotorMovement
*               instead.
*
*               In addition, a query of the motor location is done if the
*               query flag is set.  Typically, a query is not required--since
*               the target position is valid if the move was successful.  The
*               query mode would be used when moving to liquid.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_FinishMotorMovement(    // FAIL or SUCCESS
        int iMotor,		// motor handle
        int bQueryLocation)     // flag to query location after move
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_CancelMotorMovement
*
*   Purpose:    "Cancels" a motor move sequence.  Resets the next move pending
*               parameter w/o changing the previous location.  Also, resets
*               the active flag.
*
*               This function can be called in the following two cases:
*               - After MSL_SetupMotorNextMove and before
*                   MSL_SendMotorsForward 
*               - After MSL_WaitForMotorsDone for a motor that had an error
*                   so that motor in error will not move again and again, or
*                   will not flag the error again even when it's not being
*                   moved.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_CancelMotorMovement(    // FAIL or SUCCESS
        int iMotor)             // motor handle

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_SendMotorsBackward
*
*   Purpose:    Sends motor parameters to the CAN driver in preparation for
*               for a move back to the previous known location.  Only motors
*               which are initialized and have the next move initialized
*               (via MSL_SetMotorNextMove) are serviced.  All motors will
*               move to their previous location on the next MSL_StartMovement
*               call.
*
*               Prior to sending any commands to the CAN driver, any
*               pending faults are first cleared via MSL_ClearMotorMoveError.
*                   
*   Method:                                                                 */

int MSLMOVE_API
    MSL_SendMotorsBackward(     // FAIL or SUCCESS
        void)
            
/*****************************************************************************/



Pump Move Function Prototypes:
-----------------------------

/*****************************************************************************
*
*   Function:   MSL_SetPumpNextMove
*
*   Purpose:    Sets the target location, speed, ramp, pre-move and post-move
*               delays, and valve position for the next move.  This function
*               verifies that the pump has been initialized and the target
*               location is within the pump range.  If the speed or ramp is
*               zero, the pump default speed or ramp is used.
*
*   NOTE:       Although the valve position is passed here, it is no longer
*               required due to the way the new pump DSP firmware works.
*               Previously, the valve position and pump position could both
*               be sent, then one "go" command issued--the firmware took care
*               of positioning the valves first, and then the pumps.  Now,
*               the valves must be positioned first, and then when complete,
*               the pumps can be positioned.
*
*               Thus, the bTurnValveOnly parameter now has a slightly
*               different meaning.  Set means turn the valves, and reset
*               means position the pumps.  Now, MSL_SendPumpsFoward will
*               only send CAN data if bTurnValveOnly is reset.  And,
*               MSL_StartMovementPumps will now either send a "go" for the
*               pumps, or a valve position command for the valves.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_SetPumpNextMove(        // FAIL or SUCCESS
        int iPump,              // pump handle
        int iTargetValve,       // valve position in degrees:
                                    // VALVE_SYRINGE_TO_TIP (0)
                                    // VALVE_PERIPUMP_TO_TIP (90)
                                    // VALVE_PERIPUMP_TO_SYSLIQ (180) not used
                                    // VALVE_SYRINGE_TO_SYSLIQ (270)
        double dTargetLoc,      // absolute volume (ie, position) (ul)
        double dMoveSpeed,      // pump speed (ul/sec)
        double dMoveRamp,       // pump ramp (ul/sec/sec)
        int iPreDelay,          // pre-move delay (ms)
        int iPostDelay)         // post-move delay (ms)
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_SendPumpsForward
*
*   Purpose:    Sends pump parameters to the CAN driver in preparation for
*               the next move.  Only pumps which are initialized and have
*               the next move initialized (via MSL_SetPumpNextMove) are
*               serviced.  All pumps will move to their target location on
*               the next MSL_StartMovement call.
*
*               Prior to sending any commands to the CAN driver, any
*               pending faults are first cleared via MSL_ClearPumpMoveError.
*
*   Method:                                                                 */

int MSLMOVE_API
   MSL_SendPumpsForward(    // FAIL or SUCCESS
        void)

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_StartMovementPumps
*
*   Purpose:    Start all loaded pumps (send "go" command).  If the
*               bTurnValveOnly flag is set, send the appropriate turn
*               valve command instead.  Called by MSL_StartMovement.
*
*   Method:                                                                 */

    int MSL_StartMovementPumps(     // FAIL or SUCCESS
        void)
            
/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_WaitForPumpsDone
*
*   Purpose:    Wait for all pumps to finish movement or timeout.  Only
*               wait for pumps marked active and without error.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_WaitForPumpsDone(   // FAIL, SUCCESS, USER_ABORT, COM_ERROR, MOVE_ERROR
        int iMinTimeOut)    // minimum wait in sec before timeout

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_FinishAllPumps
*
*   Purpose:    "Finishes" the pump move sequence for all pumps that have
*               been initialized, a move pending, and no error.  This
*               function should be called after calling MSL_WaitForPumpsDone
*               and only if all the pump moves were successful.  If any
*               errors occured, MSL_CancelPumpMovement should be used for
*               pumps with the error, and MSL_FinishPumpMovement for the
*               pumps w/o an error.
*
*               A query of the pump location is done if the
*               query flag is set.  Typically, a query is not required--since
*               the target position is valid if the move was successful.  This
*               flag is more useful for motors, where the location is not
*               known when using LLS.
*
*               In addition, it makes no sense to request a query when
*               positioning valves.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_FinishAllPumps(         // FAIL or SUCCESS
        int bQueryLocation)

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_FinishPumpMovement
*
*   Purpose:    "Finishes" a pump move sequence.  First verifies that the
*               pump has been initialized, a move was pending, and no error
*               occured.  This function should be called after calling
*               MSL_WaitForPumpsDone and only if the move was successful.
*               Pumps which had an error should use MSL_CancelPumpMovement
*               instead.
*
*               A query of the pump location is done if the
*               query flag is set.  Typically, a query is not required--since
*               the target position is valid if the move was successful.  This
*               flag is more useful for motors, where the location is not
*               known when using LLS.
*
*               In addition, it makes no sense to request a query when
*               positioning valves.
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_FinishPumpMovement(     // FAIL or SUCCESS
        int iPump,              // pump handle
        int bQueryLocation)     // flag to query pump location

/*****************************************************************************/


/*****************************************************************************
*
*   Function:   MSL_CancelPumpMovement
*
*   Purpose:    "Cancels" a pump move sequence.  Resets the next move pending
*               parameter w/o changing the previous location.  Also, resets
*               the active flag so that subsequent calls to wait for pumps
*               done will not flag the error again.
*
*               This function can be called in the following two cases:
*               - After MSL_SetupPumpNextMove and before
*                   MSL_SendPumpsForward 
*               - After MSL_WaitForPumpsDone for a pump that had an error
*                   so that pump in error will not move again and again
*
*   Method:                                                                 */

int MSLMOVE_API
    MSL_CancelPumpMovement(     // FAIL or SUCCESS
        int iPump)		// pump handle

/*****************************************************************************/
