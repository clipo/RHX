/*****************************************************************************
*
*   List of rack related functions that are callable from a MSL script.
*
*   Function Return Codes:
*
*       SUCCESS =  0
*       FAIL    = -1
*
*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackLoadId
*
*   Purpose:    To load the rack id into the specified rack node.
*
*   Method: */

    int MSL_RackLoadId(         // FAIL or SUCCESS
        char* pszRackName,      // name of rack
        char* pszRackId )       // rack id string

/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackOpenEx
*
*   Purpose:    The specified rack file is read in, "positioned" on the deck,
*               and added to the Pipette Module's rack layout.
*
*               The rack positions are converted from a position relative to
*               a grid hole location (A1, B1, ...) and rack frame corner to
*               an absolute deck location.  The rack can then be used for
*               pipetting and is referenced using the supplied rack name.
*
*   Method: */

    int MSL_RackOpenEx(         // FAIL or SUCCESS
        char *pszRackName,      // name of rack
        char *pszRackFile,      // name of rack file
        int nGridRow,           // Index of grid pin row (0='A')
        int nGridColumn,        // Index of grid pin column (0='1')
        double dRotation,       // Rack rotation (i.e. degrees; 0,90,180 and 270)
        char *pszRackId,        // Default Rack identifier (eg, barcode name)
        BOOL bReqRackId )       // Flag to request rack id
            
/*****************************************************************************/




/*****************************************************************************
*
*   Function:   MSL_PlateOpenEx
*
*   Purpose:    The specified rack file is read in, "positioned" on the plate
*               support, and added to the Pipette Module's rack layout.
*
*               Before a plate can be positioned, the support must first
*               be opened (via MSL_RackOpenEx).  This positions the
*               support to an absolute location on the deck.  Then the plate
*               can be opened which positions the plate on the specified
*               support and support position, both in X-Y and in Z.
*
*               The plate X-Y positions are relative to the plate frame's
*               upper left frame corner.  The absolute location of the
*               specified support and position on the support is then added
*               to each of the plate locations.
*
*               The support's maximum travel is added to each of the plate
*               height dimensions.  The maximum travel is the height of the
*               support where the plate sits.  The safe travel height is
*               set to the maximum of the plate safe height on the support, or
*               the support safe travel height.
*
*               The plate can then be used for pipetting and is referenced
*               using the supplied rack name.
*
*   Note1:      If the specified rack name has already been opened, this
*               function simply returns SUCCESS.
*
*   Method: */

    int MSL_PlateOpenEx(            // FAIL or SUCCESS
        char *pszRackName,          // name of rack (plate)
        char *pszRackFile,          // name of rack file
        char *pszPlateSupportName,  // name of plate support
        int iPositionOnSupport,     // position on plate support
        double dRotation,           // Plate rotation (i.e. degrees; 0,90,180 and 270)
        char *pszRackId,            // Rack identifier (eg, barcode name)
        BOOL bReqRackId )           // Flag to request rack id
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackCopySampleIds
*
*   Purpose:    To copy the sample ids cached in the specified source rack's
*               position array to the position array of the destination rack.
*
*   Method: */

    int MSL_RackCopySampleIds(  // FAIL or SUCCESS
        char *szSrcRack,        // Name of source rack
        char *szDstRack )       // Name of destination rack.  If "" or NULL
                                //  the rack list will be searched for any
                                //  of the same type and location as the
                                //  source rack.
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackClose
*
*   Purpose:    The specified rack name is removed from the Pipette Module's
*               rack layout.  All associated resources are freed.
*
*   Method: */

    int MSL_RackClose(          // FAIL or SUCCESS
        char *szRackName)       // name of rack
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackCloseAll
*
*   Purpose:    All rack names are removed from the Pipette Module.
*               All associated resources are freed.
*
*   Method: */

    void MSL_RackCloseAll(
        void)
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackCheckOpen
*
*   Purpose:    Checks if specified rack is in the Pipette Module's rack
*               layout.
*
*   Method: */

    int MSL_RackCheckOpen(      // FAIL=no, SUCCESS=yes
        char *szRackName)       // name of rack file
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackDumpLayout
*
*   Purpose:    The current rack layout is written to the specified ASCII
*               dump file.  The rack layout consists of all the "open" racks.
*
*   Column      Description
*   ------      -----------------------------------------------------------
*   1           The name of the rack/plate.
*
*   2           The file containing the rack/plate definition
*
*   3           The Y grid location (zero based: 0 to  6)
*
*   4           The X grid location (zero based: 0 to 23)
*
*   5           The rack/plate rotation (i.e. 0, 90, 180 or 270)
*
*   6           The rack/plate id required flag.  If non-zero, an assembly
*               change will be triggered when the rack/plate is opened so
*               that the initial rack/plate id may be requested.
*
*   7           If a plate, The rack name of the support upon which the
*               plate is to be placed.
*
*   Method:                                                                 */

    int MSL_RackDumpLayout(     // FAIL or SUCCESS
        char *szFileName)       // name of rack dump file
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackGetUnit
*
*   Purpose:    Copies the RACKUNIT structure of a rack for the specified
*               rack name and position to the specified RACKUNIT buffer.
*
*   Notes:      - Unit is 1 based (not 0; for now there is only one unit/rack).
*               - Rack must be opened.
*               - RACKUNIT size must be provided to prevent data overun in
*                   the event that the script and MSL rack versions are not
*                   the same.
*
*   Method: */

    int MSL_RackGetUnit(        // FAIL or SUCCESS
        char *szRackName,       // name of rack
        int iUnit,              // unit number in rack (1 based)
        RACKUNIT *pUnit,        // pointer to RACKUNIT structure
        int iSize)              // size of RACKUNIT structure
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackSetUnit
*
*   Purpose:    Copies the caller specified RACKUNIT structure to the
*               specified rack name.  The MSL_RackGetUnit function should
*               be called first to initialize the RACKUNIT structure.
*
*   Notes:      - Position is 1 based (not 0).
*               - Rack must be opened.
*               - RACKUNIT size must be provided to prevent data overun in
*                   the event that the script and MSL rack versions are not
*                   the same.
*
*   Method: */

    int MSL_RackSetUnit(        // FAIL or SUCCESS
        char *szRackName,       // name of rack
        int iUnit,              // unit number in rack (1 based)
        RACKUNIT *pUnit,        // pointer to RACKUNIT structure
        int iSize)              // size of RACKUNIT structure
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackGetPosition
*
*   Purpose:    Copies the MP_POSITION structure of a rack for the specified
*               rack name and position to the specified MP_POSITION buffer.
*
*   Notes:      - Position is 1 based (not 0).
*               - Rack must be opened.
*               - MP_POSITION size must be provided to prevent data overun in
*                   the event that the script and MSL rack versions are not
*                   the same.
*
*   Method: */

    int MSL_RackGetPosition(    // FAIL or SUCCESS
        char *szRackName,       // name of rack
        int iPosition,          // position in rack (1 based)
        MP_POSITION *pPosition, // pointer to MP_POSITION structure
        int iSize)              // size of MP_POSITION structure
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RackSetPosition
*
*   Purpose:    Copies the caller specified MP_POSITION structure to the
*               specified rack name and position. The MSL_RackGetPosition
*               should be called first to initialize the MP_POSITION
*               structure.
*
*   Notes:      - Position is 1 based (not 0).
*               - Rack must be opened.
*               - MP_POSITION size must be provided to prevent data overun in
*                   the event that the script and MSL rack versions are not
*                   the same.
*
*   Method: */

    int MSL_RackSetPosition(    // FAIL or SUCCESS
        char *szRackName,       // name of rack
        int iPosition,          // position in rack (1 based)
        MP_POSITION *pPosition, // pointer to MP_POSITION structure
        int iSize)              // size of MP_POSITION structure
            
/****************************************************************************/
