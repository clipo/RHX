/******************************************************************************
MSLFILE.C:  MSL File Function Module


Comma-Delimited File Functions:
------------------------------
MSL_GetFileLines        Gets the number of text lines (or records) in the file.
MSL_GetFileLong         Gets an integer from a certain record and field in the file (aka MSL_GetFileInt)
MSL_GetFileDouble       Gets an double from a certain record and field in the file
MSL_GetFileString       Gets an string from a certain record and field in the file
MSL_GetFileRecord       Gets an entire record
MSL_GetFileSearch       Searches for a string contained in a certain field in the file
MSL_GetFileClose        Closes the currently open file (if any; files are opened automatically)
MSL_GetFileDelimitor    Gets the current file dilimiter (the comma character is the default)
MSL_SetFileDelimitor    Sets the curreny file dilimiter (does not affect the file itself)

Keyword=Value File Functions:
----------------------------
MSL_GetKeyword          Returns the value of the specified keyword.
MSL_WriteKeyword        Writes the specified keyword value.

Misc. Functions:
---------------
MSL_WriteFile           Similar to an fprintf() except the file name is passed rather
                        than a file pointer.


******************************************************************************/

/*****************************************************************************
*
*   Function:   MSL_GetFileLines
*
*   Purpose:    Get number of lines in a file.  Can also return the maximum
*               fields found in all the records.
*
*   Method: */

int MSL_GetFileLines(       // returns 0 if no file or no lines in file
                            //  else returns number of lines in file
    char *pszFilename,      // filename to check
    int  *iMaxFields)       // Maximum fields found while scanning file
                            //  (use NULL if don't care)

/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileLong
*
*   Purpose:    Get a long from a file.
*
*   Note1:      Redirection is permitted via @(filename.typ;line;field), within
*               a target file line/field.
*   Note2:      Can be called as MSL_GetFileLong(filename,line,fieldname),
*               if file used contains @fieldname1,fieldname2,...fieldnameN
*               definition on the first file line.
*   Note3:      Line and field numbers are zero based (0-n).
*
*   Method:                                                                 */

    long MSL_GetFileLong(       // returns a long value, 0 if error
        char *pszFilename,      // filename from which to derive a value
        int iLine,              // line in filename to derive value
        int iField)             // field in filename to derive value
                                //  (could be a number or name)
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileDouble
*
*   Purpose:    Get a double from a file.
*
*   Note1:      Redirection is permitted via @(filename.typ;line;field), within
*               a target file line/field.
*   Note2:      Can be called as MSL_GetFileDouble(filename,line,fieldname),
*               if file used contains @fieldname1,fieldname2,...fieldnameN
*               definition on the first file line.
*   Note3:      Line and field numbers are zero based (0-n).
*
*   Method:                                                                 */


    double MSL_GetFileDouble(   // returns a double value, 0.0 if error
        char *pszFilename,      // filename from which to derive a value
        int iLine,              // line in filename to derive value
        int iField)             // field in filename to derive value
                                //  (could be a number or name)
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileString
*
*   Purpose:    Get a string from a file.
*
*   Note1:      Redirection is permitted via @(filename.typ;line;field), within
*               a target file line/field.
*   Note2:      Can be called as MSL_GetFileString(filename,line,fieldname),
*               if file used contains @fieldname1,fieldname2,...fieldnameN
*               definition on the first file line.
*   Note3:      Line and field numbers are zero based (0-n).
*
*   Example:
*               char buf[80];
*               char *ptr;
*               ptr=MSL_GetFileString("testfile.dat", 5, "sample_id");
*               strncpy(buf, ptr, 80);
*               buf[80-1]=0;
*
*   Method:                                                                 */

    void *MSL_GetFileString(    // returns a pointer to string, or a pointer
                                //  to an empty ("") string if error
        char *pszFilename,      // filename from which to derive a value
        int iLine,              // line in filename to derive value
        int iField)             // field in filename to derive value
                                //  (could be a number or name)
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileRecord
*
*   Purpose:    Get a record from a file.
*
*   Note:       Line number is zero based (0-n).
*
*   Method:                                                                 */

    void *MSL_GetFileRecord(    // returns a pointer to string, or a pointer
                                //  to an empty ("") string if error
        char *pszFilename,      // filename from which to read record
        int iLine)              // line (record) in filename to read

/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileSearch
*
*   Purpose:    Get line containing field with matching string.
*
*   Note1:      String match strips leading controls and whitespace.
*   Note2:      Field number is zero based (0-n).
*
*   Method:                                                                 */

    int MSL_GetFileSearch(      // returns line #, or -1 if no match found
        char *pszFilename,      // filename to check
        char *pszString,        // case independant string to match
        int iField)             // field in filename to scan
                                //  (could be a number or name)
            
/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileDelimiter
*
*   Purpose:    Returns the current file delimiter
*
*   Method: */

int MSL_GetFileDelimiter()  // returns the file delimiter

/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_SetFileDelimiter
*
*   Purpose:    Sets the file delimiter and returns the previous delimiter.
*
*   Method: */

int MSL_SetFileDelimiter(   // returns the previous file delimiter
    int nNewDelimiter )     // the new file delimiter;

/****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_GetFileClose
*
*   Purpose:    Close current MSL_GetFile...() file.
*
*   Notes:      You only need to call this function if you need to use the
*               file handle used by the MSL_GetFile...() functions for some
*               other purpose.  For example, you need all 15 file handles
*               available to MSL.  Or, another program running simultaneously
*               needs to open a shared file.
*
*   Method:                                                                 */

    void *MSL_GetFileClose()        // returns NULL
            
/****************************************************************************/



/*****************************************************************************
*   Function:   MSL_WriteFile
*   Purpose:    Open a file append mode, and write a printf line to it.
*   Calls:      MSL_StringFormat, strlen, open, write, close
*
*   Note1:      This function uses an internal buffer for printf output,
*               the maximum output line is 1024 bytes.
*   Note2:      All file output is handle based binary mode.
*
*   Method:                                                                 */

    int MSL_WriteFile(          // return "errno" on error, else returns 0
        char *pszFilename,      // fully qualified filename for file write
        char *pszArguments,     // printf style control string
        ...)                    // printf style arguments
            
/****************************************************************************/




/*****************************************************************************
*
*   Function:   MSL_GetKeyword
*
*   Purpose:    Reads keyword value from file into buffer.
*
*   Note1:      Whitespace is generally ignored.  Any whitespace, before or
*               after a keyword or value is stripped.  If the string containing
*               the value is all whitespace, the variables for most types
*               will remain at their defaults.  Boolean and string variables
*               are exceptions.
*
*               Boolean variables are set to FALSE (0) if the string is
*               made up entirely of whitespace characters or the first
*               letters of the string exactly match one of the following
*               words: 0, NO, OFF, or FALSE (case-insensitive).
*
*               String variables whose value is NULL, will result in a
*               zero length string.
*
*   Note2:      If the value is an array, the type field contains the number
*               of elements in bits 8-15.  The line will a set of comma
*               delimited values which are read in as above.  The array
*               feature does not work with strings.
*
*   Note3:      Maximum length of a line in file is 1024 characters.  Strings
*               exceeding either the maximum or the caller's buffer size will
*               be read, but truncated.
*
*   Note4:      If the filename does not contain a full path to the file, the
*               current directory is assumed.
*
*   Note5:      Data type "float" is not supported--only "double".
*
*   Examples:   String:
*               MSL_GetKeyword("packard.ini", "MultiProbe", "keyword_string",
*                   "String", 1, value_string, sizeof(value_string));
*
*               Integer Array of 5:
*               MSL_GetKeyword("packard.ini", "MultiProbe", "step values",
*                   "Int", 5, steps, sizeof(int));
*
*   Return      If the file, section, or keyword could not be found, the
*   Value:      return value is FALSE.  If the keyword is found, the return
*               value is TRUE (even if the value is NULL).
*
*   Method:                                                                 */

    int MSL_GetKeyword (    // TRUE (success) or FALSE
        char *pszFilename,  // name of keyword file
        char *pszSection,   // name of section
        char *pszKeyword,   // name of keyword
        char *pszType,      // "String","Int","Long","Double","Bool","Char"
                            // Only casefolded first letter of type is used
        int  iElements,     // number of target elements (not bytes)
        void *pvTarget,     // destination buffer
        int iTargetSize)    // destination buffer size

/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_WriteKeyword
*
*   Purpose:    Change or add a keyword in a file with a new value.
*
*   Note1:      If the filename does not contain a full path to the file,
*               the current directory is assumed.
*   Note2:      If the file does not exist, it is created.
*   Note3:      The section name must be provided.  If it does not exist, it
*               is created.
*   Note4:      If the keyword is NULL, the entire section is deleted!
*   Note5:      If the value (argument list) is NULL, the keyword is deleted.
*               A null string can be used to blank the keyword.
*   Note6:      Maximum length of a line in file is 1024 characters.
*
*   Examples:   sprintf style parameter:
*               MSL_WriteKeyword("packard.ini", "MultiProbe", "Run Number",
*                   "%d by %s", run, user_name);
*
*               delete keyword:
*               MSL_WriteKeyword("sample.dat", "MySection", "keyword", NULL);
*               
*               blank keyword value:
*               MSL_WriteKeyword("sample.dat", "MySection", "keyword", "");
*
*   Method:                                                                 */

    int MSL_WriteKeyword (  // True (success) or FALSE
        char *pszFilename,  // name of keyword file
        char *pszSection,   // name of section
        char *pszKeyword,   // name of keyword
        char *pszArguments, // printf style argument for value
        ...)                // additional printf style arguments

/*****************************************************************************/
