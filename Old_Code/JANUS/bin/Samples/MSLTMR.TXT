/******************************************************************************
*
*   Function:   MSL_TimeMarkerFind
*
*   Purpose:    To return a pointer to the time marker structure of the
*               specified name.  Returns NULL if the marker was not found
*
*   Notes:
*
*   Method: */

MP2_TIME_MARKER* MSL_TimeMarkerFind(
                 char *pszName,         // Name of the time marker to find.
                                        //  If a matching marker is not found
                                        //  the current time will be loaded
                                        //  into pTime.
                 struct tm *pTime )     // Time stored in the timer marker
                                        //  structure

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_TimeMarkerCreate
*
*   Purpose:    To create/update a time marker.
*
*   Notes:
*
*   Method: */

int MSL_TimeMarkerCreate(
    char *pszName )         // Name of the time marker to create.  If a marker
                            //  with the same name already exists, it will
                            //  be loaded with the current local time.

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_TimeMarkerDelete
*
*   Purpose:    To delete the specified time marker
*
*   Notes:
*
*   Method: */

int MSL_TimeMarkerDelete(
    char *pszName )         // Name of the time marker to delete.  If "" or
                            //  NULL, all time markers will be deleted.

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_TimeMarkerLook
*
*   Purpose:    To return the time the specified marker was created/updated.
*
*   Notes:
*
*   Method: */

int MSL_TimeMarkerLook(
    char *pszName,          // Name of the time marker.  If "" or NULL, the
                            //  current local time will be returned.
    MP2_DATE* pDate,        // Year, month, day
    MP2_TIME* pTime )       // Hour, minute, second.

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_TimeMarkerWait
*
*   Purpose:    To pause the script until the specified time past when the
*               marker was created has expired.
*
*   Notes:      If the name of a user function is passed, it will be called
*               at the specified interval (dInterval) while the timer is
*               active and one last time after the timer expires.  The user
*               function will be passed a pointer to the time marker structure
*               MP2_TIME_MARKER.  If the user function returns a value
*               less than zero, the timer will be stopped.
*
*   Method: */

int MSL_TimeMarkerWait(
    char *pszName,          // Name of the time marker.  If "" or NULL, the
                            //  current local time will be used.
    MP2_TIME* pTime,        // Time period beyond the marker time to wait
    char *pszUserFunct,     // Optional user function to invoke instead of
                            //  displaying a dialog box
    double dInterval )      // Interval (in floating seconds) in which to
                            //  invoke the user function during the wait
                            //  period.

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_DateTimeWait
*
*   Purpose:    To pause the script until the specified date time has arrived.
*
*   Notes:      If the name of a user function is passed, it will be called
*               at the specified interval (dInterval) while the timer is
*               active and one last time after the timer expires.  The user
*               function will be passed a pointer to the time marker structure
*               MP2_TIME_MARKER.  If the user function returns a value
*               less than zero, the timer will be stopped.
*
*   Method: */

int MSL_DateTimeWait(
    char *pszName,          // Name to place on the dialog box banner
    MP2_DATE* pDate,        // Date to wait for
    MP2_TIME* pTime,        // Time of day to wait for
    char *pszUserFunct,     // Optional user function to invoke instead of
                            //  displaying a dialog box
    double dInterval )      // Interval (in floating seconds) in which to
                            //  invoke the user function during the wait
                            //  period.

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_DateToSeconds
*
*   Purpose:    To convert an MP2_DATE structure into a number of seconds
*               passed 1/1/1970.
*
*   Notes:
*
*   Method: */

int MSL_DateToSeconds(
    MP2_DATE* pDate )    // Date to be converted

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_SecondsToDate
*
*   Purpose:    To convert a number of seconds (passed 1/1/1970) into
*               the mYear, nMonth and nDay values of the MP2_DATE structure.
*
*   Notes:
*
*   Method: */

void MSL_SecondsToDate(
     int nSeconds,       // Seconds to be converted
     MP2_DATE* pDate )      // Ptr to structure where date to be loaded

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_DateToString
*
*   Purpose:    To convert an MP2_DATE structure into a ASCII string
*               according to the local settings.
*
*   Notes:
*
*   Method: */

void MSL_DateToString(
     MP2_DATE* pDate,       // Date to be converted to a string
     char* pszDate,         // Address of text buffer to receive the date
     UINT  nMaxLen )        // Max length of the buffer

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_StringToDate
*
*   Purpose:    To convert an ASCII string into a date value assuming the
*               local format.
*
*   Notes:
*
*   Method: */

BOOL MSL_StringToDate(      // Returns FALSE if unsuccessful
     char* pszDate,         // Address of text buffer from which date is to
                            //  be extracted
                            //  If NULL or zero length, the current date will
                            //  be used.
     MP2_DATE* pDate )      // Ptr to structure where date to be loaded

/*****************************************************************************/




/******************************************************************************
*
*   Function:   MSL_TimeToSeconds
*
*   Purpose:    To convert an MP2_TIME structure into a number of seconds.
*
*   Notes:      Requires that the bPeriod member of the MP2_TIME structure
*               be set appropriately so that time of day or a time period
*               is used
*
*   Method: */

int MSL_TimeToSeconds(
    MP2_TIME* pTime )      // Date to be converted

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_SecondsToTime
*
*   Purpose:    To convert a number of seconds into a time of day or
*               time period.
*
*   Notes:      Requires that the bPeriod member of the MP2_TIME structure
*               be set appropriately so that time of day or a time period
*               is generated.
*
*   Method: */

void MSL_SecondsToTime(
     int nSeconds,         // Seconds to be converted
     MP2_TIME* pTime )      // Ptr to structure where date to be loaded

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_TimeToString
*
*   Purpose:    To convert an MP2_TIME structure into a ASCII string.
*
*   Notes:      Requires that the bPeriod member of the MP2_TIME structure
*               be set appropriately so that time of day or a time period
*               is used
*
*   Method: */

void MSL_TimeToString(
     MP2_TIME* pTime,       // Time to be converted to a string
     char* pszTime,         // Address of text buffer to receive the date
     UINT  nMaxLen )        // Max length of the buffer

/*****************************************************************************/



/******************************************************************************
*
*   Function:   MSL_StringToTime
*
*   Purpose:    To convert an ASCII string into a time value.
*
*   Notes:      Requires that the bPeriod member of the MP2_TIME structure
*               be set appropriately so that time of day or a time period
*               is used
*
*   Method: */

BOOL MSL_StringToTime(      // Returns FALSE if unsuccessful
     char* pszTime,         // Address of text buffer from which time is to
                            //  be extracted
                            //  If NULL or zero length, the current time will
                            //  be used (or zero for time periods).
     MP2_TIME* pTime )      // Ptr to structure where date to be loaded

/*****************************************************************************/

