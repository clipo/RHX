/******************************************************************************
MSLREMOTE.C:  MSL Remote Modules

Doc_Start:

Remote Overview:
---------------

The Remote Module provides a set of functions for interfacing with the
following remote devices:
    * Disk Files
    * COMM Ports

Two levels of support are provided:  basic text string I/O support and
"AutoStart" support.

Basic I/O Functions:
-------------------

    * Send or get one line of text
    * Timeout and retry capability
    * Can be called directly from MSL script, or can be hooked into MSL
        pipette operation or error callback functions for almost unlimited
        flexibility


AutoStart Support:
-----------------

(Currently not implemented)


Doc_End:

******************************************************************************/




/*****************************************************************************
*
*   Function:   MSL_RemoteClearDevices
*
*   Purpose:    Clears data for all the remote devices.  This function
*               should be called once and only once on startup.  Calling it
*               again later, could destroy devices already in use.
*
*   Method:                                                                 */

    int MSL_RemoteClearDevices(     // SUCCESS
        void)
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteOpenCOMM
*
*   Purpose:    A remote device object is opened for the specified COMM port.
*               An error is returned if the device has already been opened.
*
*   Note 1:     The remove device object and COMM port itself are opened here.
*               If either has already been opened, an error code is returned.
*               A remote data structure is initialized and a handle to the
*               device returned.  Note that this "handle" is simply the index
*               into the internal remote device array, and not the actual
*               operating system handle.
*
*   Method:                                                                 */

    int MSL_RemoteOpenCOMM(     // FAIL or handle to device
        int iPort,              // COMM port
        char *pszTerminators)   // ptr to string of termination characters, eg:
                                  // "\r\n\t" terminates input on carriage
                                  // return, linefeed, or tab

/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteOpenFile
*
*   Purpose:    A remote device object is opened for the specified filenames.
*               An error is returned if the device has already been opened.
*
*   Note 1:     In the case of a file based remote device, the file itself is
*               not actually opened here--it is opened and closed anytime it is
*               written or read.  Rather, a remote device data structure is
*               initialized and a handle to the device returned.  Note that
*               this "handle" is simply the index into the internal remote
*               device array, and not the actual operating system handle.
*
*   Note 2:     Two filenames must be provided--one for read (get) and one
*               for write (send).  These could be the same.
*
*   Method:                                                                 */

    int MSL_RemoteOpenFile(     // FAIL or handle to device
        char *pszGetFilename,   // get filename
        char *pszSendFilename,  // send filename
        char *pszTerminators)   // ptr to string of termination characters, eg:
                                  // "\r\n\t" terminates input on carriage
                                  // return, linefeed, or tab

/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteCloseDevice
*
*   Purpose:    The specified remote device is closed.
*
*   Method:                                                                 */

    int MSL_RemoteCloseDevice(  // FAIL or SUCCESS
        int iDevice)            // handle to remote device
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteCloseAll
*
*   Purpose:    Closes all remote devices.
*
*   Method:                                                                 */

    int MSL_RemoteCloseAll(     // FAIL or SUCCESS
        void)
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteSetCOMMOptions
*
*   Purpose:    Sets the COMM port options for the specified remote device.
*
*   Method:                                                                 */

    int MSL_RemoteSetCOMMOptions(   // FAIL or SUCCESS
        int iDevice,                // handle to remote device
        int iBaudRate,              // actual baud rate
        int iParity,                // parity: 0=no,1=odd,2=even,3=mark,4=space
        int iDataBits,              // # bits per byte [4-8]
        int iStopBits)              // # stop bits: 0=1, 1=1.5, 2=2
            
/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteGetString
*
*   Purpose:    Reads data from specified remote device.  The device structure
*               contains device parameters such as the device type, termination
*               characters, etc.
*
*   Notes:      - Reads characters until either a terminator character is read,
*                   the buffer is full, or a timeout occurs.
*               - Returned buffer always includes a NULL terminator.  Thus, the
*                   maximum characters returned is the buffer size minus one.
*               - If terminator character not read, the characters read until
*                   the timeout are still returned.
*               - Number of characters read (piNumRead) includes any terminator
*                   character read, but not the string terminating NULL
*                   character.
*
*   Purge Options (file type device only):
*               - PURGE_NONE:  Data is not purged
*               - PURGE_BEFORE:  File is deleted before reading.  Currently,
*                   not supported.  Should include retrys and timeout.
*               - PURGE_AFTER:  File is deleted after reading.
*               - PURGE_READ:  Only data read is deleted (NOT supported!)
*
*   Return Value:
*               If the function fails, the return value is FAIL (eg, invalid
*               device handle).  Otherwise SUCCESS is returned.  Note that,
*               for example, if the file does not exist, or if no data was
*               read, SUCCESS is still returned.  Caller should check piNumRead
*               to verify if any data was read.
*
*   Method:                                                                 */

    int MSL_RemoteGetString(    // SUCCESS or FAIL
        int iDevice,            // handle to remote device
        int iFilePurgeOption,   // purge option for file type device:
                                    // PURGE_NONE or PURGE_AFTER
        int iSize,              // max length of input string
        int iTimeout,           // timeout in seconds
        int *piNumRead,         // ptr to number of chars read in
        char *pBuffer)          // storage buffer for input characters

/*****************************************************************************/



/*****************************************************************************
*
*   Function:   MSL_RemoteSendString
*
*   Purpose:    Sends string to specified remote device.  The device structure
*               contains device parameters such as the device type, etc.
*
*   Notes:      - This function allows printf style output.  IE, the output
*                   string can be a simple string, or a printf type control
*                   string followed by optional arguments.
*               - The number of characters output in the formatted string
*                   is returned to caller.
*               - For file type remove devices, the send file can optionally
*                   be purged first.  If the file is not to be purged, then
*                   the new string is appended to the end of any existing
*                   file.
*
*   Return Value:
*               If all the characters in the buffer have been sent, the
*               function returns SUCCESS.  If the function fails (eg, invalid
*               device handle) or if a timeout occurred before the entire
*               buffer could be sent, the return value is FAIL.
*
*   Method:                                                                 */

    int MSL_RemoteSendString(   // SUCCESS or FAIL
        int iDevice,            // handle to remote device
        int iFilePurgeOption,   // purge option for file type device:
                                     // PURGE_NONE or PURGE_BEFORE
        int iTimeout,           // timeout in seconds
        int *piNumWritten,      // ptr to number of chars sent
        char *pszString,        // string to send
        ...)                    // additional printf style arguments

/*****************************************************************************/
