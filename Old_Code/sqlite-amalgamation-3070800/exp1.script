-- define the test tables
drop table t1;
create table t1 (
    pkey      			integer primary key,
    stringcol			varchar(40),
    intcol			integer,
    time1			timestamp,
    time2                       timestamp
);
drop table t2;
create table t2 (
  pkey              integer primary key,
  x1                float,
  y1                float,
  x2                float,
  y2                float
);

drop table t3;
create table t3 (
  pkey		integer primary key,
  x		float,
  y		float
);

-- make sqlite run fast by enabling asynch IO
PRAGMA default_synchronous = OFF;

-- clean up free space
vacuum;

-- test the time functions
insert into t1 values (NULL, 'a string', 1234, now() - 10000, now() - 15000);
insert into t1 values (NULL, 'a string', 1234, now() + 20000, now() - 16000);
insert into t1 values (NULL, 'a string', 1234, now() - 30000, now() - 17000);
insert into t1 values (NULL, 'a string', 1234, now() - 3600, now() - 18000);
insert into t1 values (NULL, 'a string', 1234, now() + 2000, now() - 19000);
insert into t1 values (NULL, 'a string', 1234, now() + 200, now() - 20000);
select * from t1;
select format_gmtime(time1, "") from t1;
select format_localtime(time1, "%A, %B %d, %Y, %H:%M:%S") from t1;
select age(time1) from t1;
select age(time1), format_gmtime(time1, "") from t1 where age(time1) > 20000;
select difftime(time2,time1),format_gmtime(time1, ""),format_gmtime(time2, "") from t1;

-- test the distance functions
insert into t2 values (NULL, 0.0, 0.0, 1.0, 1.0);
insert into t2 values (NULL, 1.1, 0.0, 2.0, 1.0);
insert into t2 values (NULL, 3.2, 0.0, -4.0, 0.0);
insert into t2 values (NULL, 6.3, 0.0, 8.0, 2.0);
insert into t2 values (NULL, 12.4, 0.0, -16.0, 3.0);
insert into t2 values (NULL, 24.5, 0.0, 32.0, 4.0);
insert into t2 values (NULL, 48.6, 0.0, -64.0, 5.0);

select pkey, distance(0, 0, x1, y1) from t2 where distance(0, 0, t2.x1, t2.y1) > 4;
select pkey, distance(x1, y1, x2, y2) from t2 where distance(x1,y1,x2,y2) > 10;
select *,distance(x1, y1, x2, y2)  from t2 order by distance(x1, y1, x2, y2);

-- load the statistics table
!repeat 10
insert into t3 values(NULL, 10, 110);
insert into t3 values(NULL, 9, 109.8);
insert into t3 values(NULL, 5, 105.1);
insert into t3 values(NULL, 4, 103.8);
insert into t3 values(NULL, 3, 103.7);
insert into t3 values(NULL, 2, 102.0);
insert into t3 values(NULL, 1, 101.0);
insert into t3 values(NULL, 8, 108.8);
insert into t3 values(NULL, 7, 107.2);
insert into t3 values(NULL, 6, 106.9);
!endrepeat

-- _really_ load the statistics table
-- make the next repeat really large to check overflow
!repeat 0
insert into t3 values(NULL, rand(30)+10000, rand(60) + 100000);
!endrepeat
-- test the statistical functions

select sigma(x), sigma(y) from t3;
select variance(x), variance(y) from t3;
select dispersion(x), dispersion(y) from t3;

-- test the correlation functions

select slope(x, y), intercept(x, y), corrcoeff(x, y) from t3;

-- test various NULL value conditions

insert into t1 values (NULL, 'a string', 1234, NULL, NULL);
-- expect an error on the row with NULL timestamp1
select format_gmtime(time1, "") from t1;

insert into t2 values (NULL, 48.6, NULL, NULL, 5.0);
-- expect an error on the row with NULL values
select pkey, distance(0, 0, x1, y1) from t2 where distance(0, 0, t2.x1, t2.y1) > 4;

insert into t3 values(NULL, 10, NULL);
insert into t3 values(NULL, NULL, 110);

-- No errors expected but new row will be ignored
select sigma(x), sigma(y) from t3;

-- The following should return the same values as before inserting the NULLs
select slope(x, y), intercept(x, y), corrcoeff(x, y) from t3;

